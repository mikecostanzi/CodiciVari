
ProvaPWM_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0810215c  0810215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810216c  0810216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102170  08102170  00012170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08102174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  10000010  08102184  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100000c8  08102184  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f477  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ac2  00000000  00000000  0002f4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  00030f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bd8  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039a70  00000000  00000000  000327f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000dcce  00000000  00000000  0006c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018677d  00000000  00000000  00079f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002006b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034c0  00000000  00000000  00200704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102144 	.word	0x08102144

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08102144 	.word	0x08102144

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b21      	ldr	r3, [pc, #132]	; (8100394 <main+0x8c>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1f      	ldr	r2, [pc, #124]	; (8100394 <main+0x8c>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1d      	ldr	r3, [pc, #116]	; (8100394 <main+0x8c>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fdad 	bl	8100e8c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fe37 	bl	8100fa4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fdb8 	bl	8100eb0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b15      	ldr	r3, [pc, #84]	; (8100398 <main+0x90>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b13      	ldr	r3, [pc, #76]	; (810039c <main+0x94>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a11      	ldr	r2, [pc, #68]	; (810039c <main+0x94>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0e      	ldr	r3, [pc, #56]	; (810039c <main+0x94>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0d      	ldr	r2, [pc, #52]	; (810039c <main+0x94>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fa3c 	bl	81007ec <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f902 	bl	810057c <MX_GPIO_Init>
  MX_TIM1_Init();
 8100378:	f000 f816 	bl	81003a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 810037c:	f000 f8a4 	bl	81004c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8100380:	2100      	movs	r1, #0
 8100382:	4807      	ldr	r0, [pc, #28]	; (81003a0 <main+0x98>)
 8100384:	f000 ffee 	bl	8101364 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TIM1->CCR1=500;
 8100388:	4b06      	ldr	r3, [pc, #24]	; (81003a4 <main+0x9c>)
 810038a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 810038e:	635a      	str	r2, [r3, #52]	; 0x34
 8100390:	e7fa      	b.n	8100388 <main+0x80>
 8100392:	bf00      	nop
 8100394:	58024400 	.word	0x58024400
 8100398:	e000ed00 	.word	0xe000ed00
 810039c:	58026400 	.word	0x58026400
 81003a0:	1000002c 	.word	0x1000002c
 81003a4:	40010000 	.word	0x40010000

081003a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81003a8:	b580      	push	{r7, lr}
 81003aa:	b096      	sub	sp, #88	; 0x58
 81003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81003ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81003b2:	2200      	movs	r2, #0
 81003b4:	601a      	str	r2, [r3, #0]
 81003b6:	605a      	str	r2, [r3, #4]
 81003b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81003ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81003be:	2200      	movs	r2, #0
 81003c0:	601a      	str	r2, [r3, #0]
 81003c2:	605a      	str	r2, [r3, #4]
 81003c4:	609a      	str	r2, [r3, #8]
 81003c6:	60da      	str	r2, [r3, #12]
 81003c8:	611a      	str	r2, [r3, #16]
 81003ca:	615a      	str	r2, [r3, #20]
 81003cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81003ce:	1d3b      	adds	r3, r7, #4
 81003d0:	222c      	movs	r2, #44	; 0x2c
 81003d2:	2100      	movs	r1, #0
 81003d4:	4618      	mov	r0, r3
 81003d6:	f001 fead 	bl	8102134 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81003da:	4b39      	ldr	r3, [pc, #228]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003dc:	4a39      	ldr	r2, [pc, #228]	; (81004c4 <MX_TIM1_Init+0x11c>)
 81003de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81003e0:	4b37      	ldr	r3, [pc, #220]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003e2:	22ef      	movs	r2, #239	; 0xef
 81003e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81003e6:	4b36      	ldr	r3, [pc, #216]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003e8:	2200      	movs	r2, #0
 81003ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 81003ec:	4b34      	ldr	r3, [pc, #208]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81003f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81003f4:	4b32      	ldr	r3, [pc, #200]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003f6:	2200      	movs	r2, #0
 81003f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81003fa:	4b31      	ldr	r3, [pc, #196]	; (81004c0 <MX_TIM1_Init+0x118>)
 81003fc:	2200      	movs	r2, #0
 81003fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100400:	4b2f      	ldr	r3, [pc, #188]	; (81004c0 <MX_TIM1_Init+0x118>)
 8100402:	2200      	movs	r2, #0
 8100404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8100406:	482e      	ldr	r0, [pc, #184]	; (81004c0 <MX_TIM1_Init+0x118>)
 8100408:	f000 ff54 	bl	81012b4 <HAL_TIM_PWM_Init>
 810040c:	4603      	mov	r3, r0
 810040e:	2b00      	cmp	r3, #0
 8100410:	d001      	beq.n	8100416 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8100412:	f000 f8dd 	bl	81005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100416:	2300      	movs	r3, #0
 8100418:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810041a:	2300      	movs	r3, #0
 810041c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810041e:	2300      	movs	r3, #0
 8100420:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8100422:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100426:	4619      	mov	r1, r3
 8100428:	4825      	ldr	r0, [pc, #148]	; (81004c0 <MX_TIM1_Init+0x118>)
 810042a:	f001 fd53 	bl	8101ed4 <HAL_TIMEx_MasterConfigSynchronization>
 810042e:	4603      	mov	r3, r0
 8100430:	2b00      	cmp	r3, #0
 8100432:	d001      	beq.n	8100438 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8100434:	f000 f8cc 	bl	81005d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100438:	2360      	movs	r3, #96	; 0x60
 810043a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 810043c:	2300      	movs	r3, #0
 810043e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100440:	2300      	movs	r3, #0
 8100442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100444:	2300      	movs	r3, #0
 8100446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100448:	2300      	movs	r3, #0
 810044a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810044c:	2300      	movs	r3, #0
 810044e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100450:	2300      	movs	r3, #0
 8100452:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100458:	2200      	movs	r2, #0
 810045a:	4619      	mov	r1, r3
 810045c:	4818      	ldr	r0, [pc, #96]	; (81004c0 <MX_TIM1_Init+0x118>)
 810045e:	f001 f88f 	bl	8101580 <HAL_TIM_PWM_ConfigChannel>
 8100462:	4603      	mov	r3, r0
 8100464:	2b00      	cmp	r3, #0
 8100466:	d001      	beq.n	810046c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8100468:	f000 f8b2 	bl	81005d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810046c:	2300      	movs	r3, #0
 810046e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100470:	2300      	movs	r3, #0
 8100472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100474:	2300      	movs	r3, #0
 8100476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100478:	2300      	movs	r3, #0
 810047a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810047c:	2300      	movs	r3, #0
 810047e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100486:	2300      	movs	r3, #0
 8100488:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810048a:	2300      	movs	r3, #0
 810048c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810048e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100492:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100494:	2300      	movs	r3, #0
 8100496:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100498:	2300      	movs	r3, #0
 810049a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810049c:	1d3b      	adds	r3, r7, #4
 810049e:	4619      	mov	r1, r3
 81004a0:	4807      	ldr	r0, [pc, #28]	; (81004c0 <MX_TIM1_Init+0x118>)
 81004a2:	f001 fda5 	bl	8101ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 81004a6:	4603      	mov	r3, r0
 81004a8:	2b00      	cmp	r3, #0
 81004aa:	d001      	beq.n	81004b0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 81004ac:	f000 f890 	bl	81005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81004b0:	4803      	ldr	r0, [pc, #12]	; (81004c0 <MX_TIM1_Init+0x118>)
 81004b2:	f000 f8e5 	bl	8100680 <HAL_TIM_MspPostInit>

}
 81004b6:	bf00      	nop
 81004b8:	3758      	adds	r7, #88	; 0x58
 81004ba:	46bd      	mov	sp, r7
 81004bc:	bd80      	pop	{r7, pc}
 81004be:	bf00      	nop
 81004c0:	1000002c 	.word	0x1000002c
 81004c4:	40010000 	.word	0x40010000

081004c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81004c8:	b580      	push	{r7, lr}
 81004ca:	b08a      	sub	sp, #40	; 0x28
 81004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81004ce:	f107 031c 	add.w	r3, r7, #28
 81004d2:	2200      	movs	r2, #0
 81004d4:	601a      	str	r2, [r3, #0]
 81004d6:	605a      	str	r2, [r3, #4]
 81004d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81004da:	463b      	mov	r3, r7
 81004dc:	2200      	movs	r2, #0
 81004de:	601a      	str	r2, [r3, #0]
 81004e0:	605a      	str	r2, [r3, #4]
 81004e2:	609a      	str	r2, [r3, #8]
 81004e4:	60da      	str	r2, [r3, #12]
 81004e6:	611a      	str	r2, [r3, #16]
 81004e8:	615a      	str	r2, [r3, #20]
 81004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81004ec:	4b22      	ldr	r3, [pc, #136]	; (8100578 <MX_TIM2_Init+0xb0>)
 81004ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81004f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 81004f4:	4b20      	ldr	r3, [pc, #128]	; (8100578 <MX_TIM2_Init+0xb0>)
 81004f6:	22ef      	movs	r2, #239	; 0xef
 81004f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004fa:	4b1f      	ldr	r3, [pc, #124]	; (8100578 <MX_TIM2_Init+0xb0>)
 81004fc:	2200      	movs	r2, #0
 81004fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8100500:	4b1d      	ldr	r3, [pc, #116]	; (8100578 <MX_TIM2_Init+0xb0>)
 8100502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100508:	4b1b      	ldr	r3, [pc, #108]	; (8100578 <MX_TIM2_Init+0xb0>)
 810050a:	2200      	movs	r2, #0
 810050c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810050e:	4b1a      	ldr	r3, [pc, #104]	; (8100578 <MX_TIM2_Init+0xb0>)
 8100510:	2200      	movs	r2, #0
 8100512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8100514:	4818      	ldr	r0, [pc, #96]	; (8100578 <MX_TIM2_Init+0xb0>)
 8100516:	f000 fecd 	bl	81012b4 <HAL_TIM_PWM_Init>
 810051a:	4603      	mov	r3, r0
 810051c:	2b00      	cmp	r3, #0
 810051e:	d001      	beq.n	8100524 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8100520:	f000 f856 	bl	81005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100524:	2300      	movs	r3, #0
 8100526:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100528:	2300      	movs	r3, #0
 810052a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810052c:	f107 031c 	add.w	r3, r7, #28
 8100530:	4619      	mov	r1, r3
 8100532:	4811      	ldr	r0, [pc, #68]	; (8100578 <MX_TIM2_Init+0xb0>)
 8100534:	f001 fcce 	bl	8101ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8100538:	4603      	mov	r3, r0
 810053a:	2b00      	cmp	r3, #0
 810053c:	d001      	beq.n	8100542 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 810053e:	f000 f847 	bl	81005d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100542:	2360      	movs	r3, #96	; 0x60
 8100544:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8100546:	2300      	movs	r3, #0
 8100548:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810054a:	2300      	movs	r3, #0
 810054c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810054e:	2300      	movs	r3, #0
 8100550:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100552:	463b      	mov	r3, r7
 8100554:	220c      	movs	r2, #12
 8100556:	4619      	mov	r1, r3
 8100558:	4807      	ldr	r0, [pc, #28]	; (8100578 <MX_TIM2_Init+0xb0>)
 810055a:	f001 f811 	bl	8101580 <HAL_TIM_PWM_ConfigChannel>
 810055e:	4603      	mov	r3, r0
 8100560:	2b00      	cmp	r3, #0
 8100562:	d001      	beq.n	8100568 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8100564:	f000 f834 	bl	81005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8100568:	4803      	ldr	r0, [pc, #12]	; (8100578 <MX_TIM2_Init+0xb0>)
 810056a:	f000 f889 	bl	8100680 <HAL_TIM_MspPostInit>

}
 810056e:	bf00      	nop
 8100570:	3728      	adds	r7, #40	; 0x28
 8100572:	46bd      	mov	sp, r7
 8100574:	bd80      	pop	{r7, pc}
 8100576:	bf00      	nop
 8100578:	10000078 	.word	0x10000078

0810057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810057c:	b480      	push	{r7}
 810057e:	b083      	sub	sp, #12
 8100580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100582:	4b12      	ldr	r3, [pc, #72]	; (81005cc <MX_GPIO_Init+0x50>)
 8100584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100588:	4a10      	ldr	r2, [pc, #64]	; (81005cc <MX_GPIO_Init+0x50>)
 810058a:	f043 0301 	orr.w	r3, r3, #1
 810058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100592:	4b0e      	ldr	r3, [pc, #56]	; (81005cc <MX_GPIO_Init+0x50>)
 8100594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100598:	f003 0301 	and.w	r3, r3, #1
 810059c:	607b      	str	r3, [r7, #4]
 810059e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81005a0:	4b0a      	ldr	r3, [pc, #40]	; (81005cc <MX_GPIO_Init+0x50>)
 81005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005a6:	4a09      	ldr	r2, [pc, #36]	; (81005cc <MX_GPIO_Init+0x50>)
 81005a8:	f043 0310 	orr.w	r3, r3, #16
 81005ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005b0:	4b06      	ldr	r3, [pc, #24]	; (81005cc <MX_GPIO_Init+0x50>)
 81005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005b6:	f003 0310 	and.w	r3, r3, #16
 81005ba:	603b      	str	r3, [r7, #0]
 81005bc:	683b      	ldr	r3, [r7, #0]

}
 81005be:	bf00      	nop
 81005c0:	370c      	adds	r7, #12
 81005c2:	46bd      	mov	sp, r7
 81005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005c8:	4770      	bx	lr
 81005ca:	bf00      	nop
 81005cc:	58024400 	.word	0x58024400

081005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81005d4:	b672      	cpsid	i
}
 81005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81005d8:	e7fe      	b.n	81005d8 <Error_Handler+0x8>
	...

081005dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81005dc:	b480      	push	{r7}
 81005de:	b083      	sub	sp, #12
 81005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81005e2:	4b0a      	ldr	r3, [pc, #40]	; (810060c <HAL_MspInit+0x30>)
 81005e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81005e8:	4a08      	ldr	r2, [pc, #32]	; (810060c <HAL_MspInit+0x30>)
 81005ea:	f043 0302 	orr.w	r3, r3, #2
 81005ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81005f2:	4b06      	ldr	r3, [pc, #24]	; (810060c <HAL_MspInit+0x30>)
 81005f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81005f8:	f003 0302 	and.w	r3, r3, #2
 81005fc:	607b      	str	r3, [r7, #4]
 81005fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100600:	bf00      	nop
 8100602:	370c      	adds	r7, #12
 8100604:	46bd      	mov	sp, r7
 8100606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060a:	4770      	bx	lr
 810060c:	58024400 	.word	0x58024400

08100610 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8100610:	b480      	push	{r7}
 8100612:	b085      	sub	sp, #20
 8100614:	af00      	add	r7, sp, #0
 8100616:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8100618:	687b      	ldr	r3, [r7, #4]
 810061a:	681b      	ldr	r3, [r3, #0]
 810061c:	4a16      	ldr	r2, [pc, #88]	; (8100678 <HAL_TIM_PWM_MspInit+0x68>)
 810061e:	4293      	cmp	r3, r2
 8100620:	d10f      	bne.n	8100642 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8100622:	4b16      	ldr	r3, [pc, #88]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 8100624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100628:	4a14      	ldr	r2, [pc, #80]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 810062a:	f043 0301 	orr.w	r3, r3, #1
 810062e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100632:	4b12      	ldr	r3, [pc, #72]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 8100634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100638:	f003 0301 	and.w	r3, r3, #1
 810063c:	60fb      	str	r3, [r7, #12]
 810063e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8100640:	e013      	b.n	810066a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM2)
 8100642:	687b      	ldr	r3, [r7, #4]
 8100644:	681b      	ldr	r3, [r3, #0]
 8100646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810064a:	d10e      	bne.n	810066a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 810064c:	4b0b      	ldr	r3, [pc, #44]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 810064e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100652:	4a0a      	ldr	r2, [pc, #40]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 8100654:	f043 0301 	orr.w	r3, r3, #1
 8100658:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810065c:	4b07      	ldr	r3, [pc, #28]	; (810067c <HAL_TIM_PWM_MspInit+0x6c>)
 810065e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100662:	f003 0301 	and.w	r3, r3, #1
 8100666:	60bb      	str	r3, [r7, #8]
 8100668:	68bb      	ldr	r3, [r7, #8]
}
 810066a:	bf00      	nop
 810066c:	3714      	adds	r7, #20
 810066e:	46bd      	mov	sp, r7
 8100670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop
 8100678:	40010000 	.word	0x40010000
 810067c:	58024400 	.word	0x58024400

08100680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100680:	b580      	push	{r7, lr}
 8100682:	b08a      	sub	sp, #40	; 0x28
 8100684:	af00      	add	r7, sp, #0
 8100686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100688:	f107 0314 	add.w	r3, r7, #20
 810068c:	2200      	movs	r2, #0
 810068e:	601a      	str	r2, [r3, #0]
 8100690:	605a      	str	r2, [r3, #4]
 8100692:	609a      	str	r2, [r3, #8]
 8100694:	60da      	str	r2, [r3, #12]
 8100696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8100698:	687b      	ldr	r3, [r7, #4]
 810069a:	681b      	ldr	r3, [r3, #0]
 810069c:	4a25      	ldr	r2, [pc, #148]	; (8100734 <HAL_TIM_MspPostInit+0xb4>)
 810069e:	4293      	cmp	r3, r2
 81006a0:	d120      	bne.n	81006e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81006a2:	4b25      	ldr	r3, [pc, #148]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 81006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006a8:	4a23      	ldr	r2, [pc, #140]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 81006aa:	f043 0310 	orr.w	r3, r3, #16
 81006ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006b2:	4b21      	ldr	r3, [pc, #132]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b8:	f003 0310 	and.w	r3, r3, #16
 81006bc:	613b      	str	r3, [r7, #16]
 81006be:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81006c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006c6:	2302      	movs	r3, #2
 81006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ca:	2300      	movs	r3, #0
 81006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006ce:	2300      	movs	r3, #0
 81006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81006d2:	2301      	movs	r3, #1
 81006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81006d6:	f107 0314 	add.w	r3, r7, #20
 81006da:	4619      	mov	r1, r3
 81006dc:	4817      	ldr	r0, [pc, #92]	; (810073c <HAL_TIM_MspPostInit+0xbc>)
 81006de:	f000 fa25 	bl	8100b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 81006e2:	e023      	b.n	810072c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 81006e4:	687b      	ldr	r3, [r7, #4]
 81006e6:	681b      	ldr	r3, [r3, #0]
 81006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81006ec:	d11e      	bne.n	810072c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81006ee:	4b12      	ldr	r3, [pc, #72]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 81006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006f4:	4a10      	ldr	r2, [pc, #64]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 81006f6:	f043 0301 	orr.w	r3, r3, #1
 81006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006fe:	4b0e      	ldr	r3, [pc, #56]	; (8100738 <HAL_TIM_MspPostInit+0xb8>)
 8100700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100704:	f003 0301 	and.w	r3, r3, #1
 8100708:	60fb      	str	r3, [r7, #12]
 810070a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 810070c:	2308      	movs	r3, #8
 810070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100710:	2302      	movs	r3, #2
 8100712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100714:	2300      	movs	r3, #0
 8100716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100718:	2300      	movs	r3, #0
 810071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 810071c:	2301      	movs	r3, #1
 810071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100720:	f107 0314 	add.w	r3, r7, #20
 8100724:	4619      	mov	r1, r3
 8100726:	4806      	ldr	r0, [pc, #24]	; (8100740 <HAL_TIM_MspPostInit+0xc0>)
 8100728:	f000 fa00 	bl	8100b2c <HAL_GPIO_Init>
}
 810072c:	bf00      	nop
 810072e:	3728      	adds	r7, #40	; 0x28
 8100730:	46bd      	mov	sp, r7
 8100732:	bd80      	pop	{r7, pc}
 8100734:	40010000 	.word	0x40010000
 8100738:	58024400 	.word	0x58024400
 810073c:	58021000 	.word	0x58021000
 8100740:	58020000 	.word	0x58020000

08100744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100744:	b480      	push	{r7}
 8100746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100748:	e7fe      	b.n	8100748 <NMI_Handler+0x4>

0810074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810074a:	b480      	push	{r7}
 810074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810074e:	e7fe      	b.n	810074e <HardFault_Handler+0x4>

08100750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100750:	b480      	push	{r7}
 8100752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100754:	e7fe      	b.n	8100754 <MemManage_Handler+0x4>

08100756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100756:	b480      	push	{r7}
 8100758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810075a:	e7fe      	b.n	810075a <BusFault_Handler+0x4>

0810075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810075c:	b480      	push	{r7}
 810075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100760:	e7fe      	b.n	8100760 <UsageFault_Handler+0x4>

08100762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100762:	b480      	push	{r7}
 8100764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100766:	bf00      	nop
 8100768:	46bd      	mov	sp, r7
 810076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810076e:	4770      	bx	lr

08100770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100770:	b480      	push	{r7}
 8100772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100774:	bf00      	nop
 8100776:	46bd      	mov	sp, r7
 8100778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810077c:	4770      	bx	lr

0810077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810077e:	b480      	push	{r7}
 8100780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100782:	bf00      	nop
 8100784:	46bd      	mov	sp, r7
 8100786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078a:	4770      	bx	lr

0810078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810078c:	b580      	push	{r7, lr}
 810078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100790:	f000 f8c0 	bl	8100914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100794:	bf00      	nop
 8100796:	bd80      	pop	{r7, pc}

08100798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100798:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810079c:	f7ff fd9c 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007a0:	480c      	ldr	r0, [pc, #48]	; (81007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007a2:	490d      	ldr	r1, [pc, #52]	; (81007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007a4:	4a0d      	ldr	r2, [pc, #52]	; (81007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007a8:	e002      	b.n	81007b0 <LoopCopyDataInit>

081007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007ae:	3304      	adds	r3, #4

081007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007b4:	d3f9      	bcc.n	81007aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007b6:	4a0a      	ldr	r2, [pc, #40]	; (81007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81007b8:	4c0a      	ldr	r4, [pc, #40]	; (81007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007bc:	e001      	b.n	81007c2 <LoopFillZerobss>

081007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007c0:	3204      	adds	r2, #4

081007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007c4:	d3fb      	bcc.n	81007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007c6:	f001 fc91 	bl	81020ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007ca:	f7ff fd9d 	bl	8100308 <main>
  bx  lr
 81007ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007d0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007d4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007d8:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81007dc:	08102174 	.word	0x08102174
  ldr r2, =_sbss
 81007e0:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81007e4:	100000c8 	.word	0x100000c8

081007e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007e8:	e7fe      	b.n	81007e8 <ADC3_IRQHandler>
	...

081007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007ec:	b580      	push	{r7, lr}
 81007ee:	b082      	sub	sp, #8
 81007f0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007f2:	4b28      	ldr	r3, [pc, #160]	; (8100894 <HAL_Init+0xa8>)
 81007f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007f8:	4a26      	ldr	r2, [pc, #152]	; (8100894 <HAL_Init+0xa8>)
 81007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81007fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100802:	4b24      	ldr	r3, [pc, #144]	; (8100894 <HAL_Init+0xa8>)
 8100804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810080c:	603b      	str	r3, [r7, #0]
 810080e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100810:	4b21      	ldr	r3, [pc, #132]	; (8100898 <HAL_Init+0xac>)
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810081c:	4a1e      	ldr	r2, [pc, #120]	; (8100898 <HAL_Init+0xac>)
 810081e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100822:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100824:	4b1c      	ldr	r3, [pc, #112]	; (8100898 <HAL_Init+0xac>)
 8100826:	681b      	ldr	r3, [r3, #0]
 8100828:	4a1b      	ldr	r2, [pc, #108]	; (8100898 <HAL_Init+0xac>)
 810082a:	f043 0301 	orr.w	r3, r3, #1
 810082e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100830:	2003      	movs	r0, #3
 8100832:	f000 f935 	bl	8100aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100836:	f000 fbc3 	bl	8100fc0 <HAL_RCC_GetSysClockFreq>
 810083a:	4602      	mov	r2, r0
 810083c:	4b15      	ldr	r3, [pc, #84]	; (8100894 <HAL_Init+0xa8>)
 810083e:	699b      	ldr	r3, [r3, #24]
 8100840:	0a1b      	lsrs	r3, r3, #8
 8100842:	f003 030f 	and.w	r3, r3, #15
 8100846:	4915      	ldr	r1, [pc, #84]	; (810089c <HAL_Init+0xb0>)
 8100848:	5ccb      	ldrb	r3, [r1, r3]
 810084a:	f003 031f 	and.w	r3, r3, #31
 810084e:	fa22 f303 	lsr.w	r3, r2, r3
 8100852:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100854:	4b0f      	ldr	r3, [pc, #60]	; (8100894 <HAL_Init+0xa8>)
 8100856:	699b      	ldr	r3, [r3, #24]
 8100858:	f003 030f 	and.w	r3, r3, #15
 810085c:	4a0f      	ldr	r2, [pc, #60]	; (810089c <HAL_Init+0xb0>)
 810085e:	5cd3      	ldrb	r3, [r2, r3]
 8100860:	f003 031f 	and.w	r3, r3, #31
 8100864:	687a      	ldr	r2, [r7, #4]
 8100866:	fa22 f303 	lsr.w	r3, r2, r3
 810086a:	4a0d      	ldr	r2, [pc, #52]	; (81008a0 <HAL_Init+0xb4>)
 810086c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810086e:	4b0c      	ldr	r3, [pc, #48]	; (81008a0 <HAL_Init+0xb4>)
 8100870:	681b      	ldr	r3, [r3, #0]
 8100872:	4a0c      	ldr	r2, [pc, #48]	; (81008a4 <HAL_Init+0xb8>)
 8100874:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100876:	2000      	movs	r0, #0
 8100878:	f000 f816 	bl	81008a8 <HAL_InitTick>
 810087c:	4603      	mov	r3, r0
 810087e:	2b00      	cmp	r3, #0
 8100880:	d001      	beq.n	8100886 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100882:	2301      	movs	r3, #1
 8100884:	e002      	b.n	810088c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100886:	f7ff fea9 	bl	81005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810088a:	2300      	movs	r3, #0
}
 810088c:	4618      	mov	r0, r3
 810088e:	3708      	adds	r7, #8
 8100890:	46bd      	mov	sp, r7
 8100892:	bd80      	pop	{r7, pc}
 8100894:	58024400 	.word	0x58024400
 8100898:	40024400 	.word	0x40024400
 810089c:	0810215c 	.word	0x0810215c
 81008a0:	10000004 	.word	0x10000004
 81008a4:	10000000 	.word	0x10000000

081008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008a8:	b580      	push	{r7, lr}
 81008aa:	b082      	sub	sp, #8
 81008ac:	af00      	add	r7, sp, #0
 81008ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008b0:	4b15      	ldr	r3, [pc, #84]	; (8100908 <HAL_InitTick+0x60>)
 81008b2:	781b      	ldrb	r3, [r3, #0]
 81008b4:	2b00      	cmp	r3, #0
 81008b6:	d101      	bne.n	81008bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81008b8:	2301      	movs	r3, #1
 81008ba:	e021      	b.n	8100900 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81008bc:	4b13      	ldr	r3, [pc, #76]	; (810090c <HAL_InitTick+0x64>)
 81008be:	681a      	ldr	r2, [r3, #0]
 81008c0:	4b11      	ldr	r3, [pc, #68]	; (8100908 <HAL_InitTick+0x60>)
 81008c2:	781b      	ldrb	r3, [r3, #0]
 81008c4:	4619      	mov	r1, r3
 81008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 81008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 81008d2:	4618      	mov	r0, r3
 81008d4:	f000 f909 	bl	8100aea <HAL_SYSTICK_Config>
 81008d8:	4603      	mov	r3, r0
 81008da:	2b00      	cmp	r3, #0
 81008dc:	d001      	beq.n	81008e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81008de:	2301      	movs	r3, #1
 81008e0:	e00e      	b.n	8100900 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	2b0f      	cmp	r3, #15
 81008e6:	d80a      	bhi.n	81008fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81008e8:	2200      	movs	r2, #0
 81008ea:	6879      	ldr	r1, [r7, #4]
 81008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81008f0:	f000 f8e1 	bl	8100ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81008f4:	4a06      	ldr	r2, [pc, #24]	; (8100910 <HAL_InitTick+0x68>)
 81008f6:	687b      	ldr	r3, [r7, #4]
 81008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81008fa:	2300      	movs	r3, #0
 81008fc:	e000      	b.n	8100900 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81008fe:	2301      	movs	r3, #1
}
 8100900:	4618      	mov	r0, r3
 8100902:	3708      	adds	r7, #8
 8100904:	46bd      	mov	sp, r7
 8100906:	bd80      	pop	{r7, pc}
 8100908:	1000000c 	.word	0x1000000c
 810090c:	10000000 	.word	0x10000000
 8100910:	10000008 	.word	0x10000008

08100914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100914:	b480      	push	{r7}
 8100916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100918:	4b06      	ldr	r3, [pc, #24]	; (8100934 <HAL_IncTick+0x20>)
 810091a:	781b      	ldrb	r3, [r3, #0]
 810091c:	461a      	mov	r2, r3
 810091e:	4b06      	ldr	r3, [pc, #24]	; (8100938 <HAL_IncTick+0x24>)
 8100920:	681b      	ldr	r3, [r3, #0]
 8100922:	4413      	add	r3, r2
 8100924:	4a04      	ldr	r2, [pc, #16]	; (8100938 <HAL_IncTick+0x24>)
 8100926:	6013      	str	r3, [r2, #0]
}
 8100928:	bf00      	nop
 810092a:	46bd      	mov	sp, r7
 810092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100930:	4770      	bx	lr
 8100932:	bf00      	nop
 8100934:	1000000c 	.word	0x1000000c
 8100938:	100000c4 	.word	0x100000c4

0810093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810093c:	b480      	push	{r7}
 810093e:	b085      	sub	sp, #20
 8100940:	af00      	add	r7, sp, #0
 8100942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100944:	687b      	ldr	r3, [r7, #4]
 8100946:	f003 0307 	and.w	r3, r3, #7
 810094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810094c:	4b0c      	ldr	r3, [pc, #48]	; (8100980 <__NVIC_SetPriorityGrouping+0x44>)
 810094e:	68db      	ldr	r3, [r3, #12]
 8100950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100952:	68ba      	ldr	r2, [r7, #8]
 8100954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100958:	4013      	ands	r3, r2
 810095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810095c:	68fb      	ldr	r3, [r7, #12]
 810095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100960:	68bb      	ldr	r3, [r7, #8]
 8100962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810096e:	4a04      	ldr	r2, [pc, #16]	; (8100980 <__NVIC_SetPriorityGrouping+0x44>)
 8100970:	68bb      	ldr	r3, [r7, #8]
 8100972:	60d3      	str	r3, [r2, #12]
}
 8100974:	bf00      	nop
 8100976:	3714      	adds	r7, #20
 8100978:	46bd      	mov	sp, r7
 810097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810097e:	4770      	bx	lr
 8100980:	e000ed00 	.word	0xe000ed00

08100984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100984:	b480      	push	{r7}
 8100986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100988:	4b04      	ldr	r3, [pc, #16]	; (810099c <__NVIC_GetPriorityGrouping+0x18>)
 810098a:	68db      	ldr	r3, [r3, #12]
 810098c:	0a1b      	lsrs	r3, r3, #8
 810098e:	f003 0307 	and.w	r3, r3, #7
}
 8100992:	4618      	mov	r0, r3
 8100994:	46bd      	mov	sp, r7
 8100996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099a:	4770      	bx	lr
 810099c:	e000ed00 	.word	0xe000ed00

081009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81009a0:	b480      	push	{r7}
 81009a2:	b083      	sub	sp, #12
 81009a4:	af00      	add	r7, sp, #0
 81009a6:	4603      	mov	r3, r0
 81009a8:	6039      	str	r1, [r7, #0]
 81009aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009b0:	2b00      	cmp	r3, #0
 81009b2:	db0a      	blt.n	81009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009b4:	683b      	ldr	r3, [r7, #0]
 81009b6:	b2da      	uxtb	r2, r3
 81009b8:	490c      	ldr	r1, [pc, #48]	; (81009ec <__NVIC_SetPriority+0x4c>)
 81009ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009be:	0112      	lsls	r2, r2, #4
 81009c0:	b2d2      	uxtb	r2, r2
 81009c2:	440b      	add	r3, r1
 81009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81009c8:	e00a      	b.n	81009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009ca:	683b      	ldr	r3, [r7, #0]
 81009cc:	b2da      	uxtb	r2, r3
 81009ce:	4908      	ldr	r1, [pc, #32]	; (81009f0 <__NVIC_SetPriority+0x50>)
 81009d0:	88fb      	ldrh	r3, [r7, #6]
 81009d2:	f003 030f 	and.w	r3, r3, #15
 81009d6:	3b04      	subs	r3, #4
 81009d8:	0112      	lsls	r2, r2, #4
 81009da:	b2d2      	uxtb	r2, r2
 81009dc:	440b      	add	r3, r1
 81009de:	761a      	strb	r2, [r3, #24]
}
 81009e0:	bf00      	nop
 81009e2:	370c      	adds	r7, #12
 81009e4:	46bd      	mov	sp, r7
 81009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ea:	4770      	bx	lr
 81009ec:	e000e100 	.word	0xe000e100
 81009f0:	e000ed00 	.word	0xe000ed00

081009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81009f4:	b480      	push	{r7}
 81009f6:	b089      	sub	sp, #36	; 0x24
 81009f8:	af00      	add	r7, sp, #0
 81009fa:	60f8      	str	r0, [r7, #12]
 81009fc:	60b9      	str	r1, [r7, #8]
 81009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a00:	68fb      	ldr	r3, [r7, #12]
 8100a02:	f003 0307 	and.w	r3, r3, #7
 8100a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a08:	69fb      	ldr	r3, [r7, #28]
 8100a0a:	f1c3 0307 	rsb	r3, r3, #7
 8100a0e:	2b04      	cmp	r3, #4
 8100a10:	bf28      	it	cs
 8100a12:	2304      	movcs	r3, #4
 8100a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a16:	69fb      	ldr	r3, [r7, #28]
 8100a18:	3304      	adds	r3, #4
 8100a1a:	2b06      	cmp	r3, #6
 8100a1c:	d902      	bls.n	8100a24 <NVIC_EncodePriority+0x30>
 8100a1e:	69fb      	ldr	r3, [r7, #28]
 8100a20:	3b03      	subs	r3, #3
 8100a22:	e000      	b.n	8100a26 <NVIC_EncodePriority+0x32>
 8100a24:	2300      	movs	r3, #0
 8100a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100a2c:	69bb      	ldr	r3, [r7, #24]
 8100a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a32:	43da      	mvns	r2, r3
 8100a34:	68bb      	ldr	r3, [r7, #8]
 8100a36:	401a      	ands	r2, r3
 8100a38:	697b      	ldr	r3, [r7, #20]
 8100a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100a40:	697b      	ldr	r3, [r7, #20]
 8100a42:	fa01 f303 	lsl.w	r3, r1, r3
 8100a46:	43d9      	mvns	r1, r3
 8100a48:	687b      	ldr	r3, [r7, #4]
 8100a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a4c:	4313      	orrs	r3, r2
         );
}
 8100a4e:	4618      	mov	r0, r3
 8100a50:	3724      	adds	r7, #36	; 0x24
 8100a52:	46bd      	mov	sp, r7
 8100a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a58:	4770      	bx	lr
	...

08100a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	b082      	sub	sp, #8
 8100a60:	af00      	add	r7, sp, #0
 8100a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100a64:	687b      	ldr	r3, [r7, #4]
 8100a66:	3b01      	subs	r3, #1
 8100a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100a6c:	d301      	bcc.n	8100a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100a6e:	2301      	movs	r3, #1
 8100a70:	e00f      	b.n	8100a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100a72:	4a0a      	ldr	r2, [pc, #40]	; (8100a9c <SysTick_Config+0x40>)
 8100a74:	687b      	ldr	r3, [r7, #4]
 8100a76:	3b01      	subs	r3, #1
 8100a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100a7a:	210f      	movs	r1, #15
 8100a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100a80:	f7ff ff8e 	bl	81009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100a84:	4b05      	ldr	r3, [pc, #20]	; (8100a9c <SysTick_Config+0x40>)
 8100a86:	2200      	movs	r2, #0
 8100a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100a8a:	4b04      	ldr	r3, [pc, #16]	; (8100a9c <SysTick_Config+0x40>)
 8100a8c:	2207      	movs	r2, #7
 8100a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100a90:	2300      	movs	r3, #0
}
 8100a92:	4618      	mov	r0, r3
 8100a94:	3708      	adds	r7, #8
 8100a96:	46bd      	mov	sp, r7
 8100a98:	bd80      	pop	{r7, pc}
 8100a9a:	bf00      	nop
 8100a9c:	e000e010 	.word	0xe000e010

08100aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100aa0:	b580      	push	{r7, lr}
 8100aa2:	b082      	sub	sp, #8
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100aa8:	6878      	ldr	r0, [r7, #4]
 8100aaa:	f7ff ff47 	bl	810093c <__NVIC_SetPriorityGrouping>
}
 8100aae:	bf00      	nop
 8100ab0:	3708      	adds	r7, #8
 8100ab2:	46bd      	mov	sp, r7
 8100ab4:	bd80      	pop	{r7, pc}

08100ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ab6:	b580      	push	{r7, lr}
 8100ab8:	b086      	sub	sp, #24
 8100aba:	af00      	add	r7, sp, #0
 8100abc:	4603      	mov	r3, r0
 8100abe:	60b9      	str	r1, [r7, #8]
 8100ac0:	607a      	str	r2, [r7, #4]
 8100ac2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ac4:	f7ff ff5e 	bl	8100984 <__NVIC_GetPriorityGrouping>
 8100ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100aca:	687a      	ldr	r2, [r7, #4]
 8100acc:	68b9      	ldr	r1, [r7, #8]
 8100ace:	6978      	ldr	r0, [r7, #20]
 8100ad0:	f7ff ff90 	bl	81009f4 <NVIC_EncodePriority>
 8100ad4:	4602      	mov	r2, r0
 8100ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100ada:	4611      	mov	r1, r2
 8100adc:	4618      	mov	r0, r3
 8100ade:	f7ff ff5f 	bl	81009a0 <__NVIC_SetPriority>
}
 8100ae2:	bf00      	nop
 8100ae4:	3718      	adds	r7, #24
 8100ae6:	46bd      	mov	sp, r7
 8100ae8:	bd80      	pop	{r7, pc}

08100aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100aea:	b580      	push	{r7, lr}
 8100aec:	b082      	sub	sp, #8
 8100aee:	af00      	add	r7, sp, #0
 8100af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100af2:	6878      	ldr	r0, [r7, #4]
 8100af4:	f7ff ffb2 	bl	8100a5c <SysTick_Config>
 8100af8:	4603      	mov	r3, r0
}
 8100afa:	4618      	mov	r0, r3
 8100afc:	3708      	adds	r7, #8
 8100afe:	46bd      	mov	sp, r7
 8100b00:	bd80      	pop	{r7, pc}
	...

08100b04 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b04:	b480      	push	{r7}
 8100b06:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b08:	4b07      	ldr	r3, [pc, #28]	; (8100b28 <HAL_GetCurrentCPUID+0x24>)
 8100b0a:	681b      	ldr	r3, [r3, #0]
 8100b0c:	091b      	lsrs	r3, r3, #4
 8100b0e:	f003 030f 	and.w	r3, r3, #15
 8100b12:	2b07      	cmp	r3, #7
 8100b14:	d101      	bne.n	8100b1a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b16:	2303      	movs	r3, #3
 8100b18:	e000      	b.n	8100b1c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b1a:	2301      	movs	r3, #1
  }
}
 8100b1c:	4618      	mov	r0, r3
 8100b1e:	46bd      	mov	sp, r7
 8100b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b24:	4770      	bx	lr
 8100b26:	bf00      	nop
 8100b28:	e000ed00 	.word	0xe000ed00

08100b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100b2c:	b480      	push	{r7}
 8100b2e:	b089      	sub	sp, #36	; 0x24
 8100b30:	af00      	add	r7, sp, #0
 8100b32:	6078      	str	r0, [r7, #4]
 8100b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100b36:	2300      	movs	r3, #0
 8100b38:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100b3a:	4b89      	ldr	r3, [pc, #548]	; (8100d60 <HAL_GPIO_Init+0x234>)
 8100b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100b3e:	e194      	b.n	8100e6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100b40:	683b      	ldr	r3, [r7, #0]
 8100b42:	681a      	ldr	r2, [r3, #0]
 8100b44:	2101      	movs	r1, #1
 8100b46:	69fb      	ldr	r3, [r7, #28]
 8100b48:	fa01 f303 	lsl.w	r3, r1, r3
 8100b4c:	4013      	ands	r3, r2
 8100b4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100b50:	693b      	ldr	r3, [r7, #16]
 8100b52:	2b00      	cmp	r3, #0
 8100b54:	f000 8186 	beq.w	8100e64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100b58:	683b      	ldr	r3, [r7, #0]
 8100b5a:	685b      	ldr	r3, [r3, #4]
 8100b5c:	f003 0303 	and.w	r3, r3, #3
 8100b60:	2b01      	cmp	r3, #1
 8100b62:	d005      	beq.n	8100b70 <HAL_GPIO_Init+0x44>
 8100b64:	683b      	ldr	r3, [r7, #0]
 8100b66:	685b      	ldr	r3, [r3, #4]
 8100b68:	f003 0303 	and.w	r3, r3, #3
 8100b6c:	2b02      	cmp	r3, #2
 8100b6e:	d130      	bne.n	8100bd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100b70:	687b      	ldr	r3, [r7, #4]
 8100b72:	689b      	ldr	r3, [r3, #8]
 8100b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100b76:	69fb      	ldr	r3, [r7, #28]
 8100b78:	005b      	lsls	r3, r3, #1
 8100b7a:	2203      	movs	r2, #3
 8100b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8100b80:	43db      	mvns	r3, r3
 8100b82:	69ba      	ldr	r2, [r7, #24]
 8100b84:	4013      	ands	r3, r2
 8100b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100b88:	683b      	ldr	r3, [r7, #0]
 8100b8a:	68da      	ldr	r2, [r3, #12]
 8100b8c:	69fb      	ldr	r3, [r7, #28]
 8100b8e:	005b      	lsls	r3, r3, #1
 8100b90:	fa02 f303 	lsl.w	r3, r2, r3
 8100b94:	69ba      	ldr	r2, [r7, #24]
 8100b96:	4313      	orrs	r3, r2
 8100b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100b9a:	687b      	ldr	r3, [r7, #4]
 8100b9c:	69ba      	ldr	r2, [r7, #24]
 8100b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100ba0:	687b      	ldr	r3, [r7, #4]
 8100ba2:	685b      	ldr	r3, [r3, #4]
 8100ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100ba6:	2201      	movs	r2, #1
 8100ba8:	69fb      	ldr	r3, [r7, #28]
 8100baa:	fa02 f303 	lsl.w	r3, r2, r3
 8100bae:	43db      	mvns	r3, r3
 8100bb0:	69ba      	ldr	r2, [r7, #24]
 8100bb2:	4013      	ands	r3, r2
 8100bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100bb6:	683b      	ldr	r3, [r7, #0]
 8100bb8:	685b      	ldr	r3, [r3, #4]
 8100bba:	091b      	lsrs	r3, r3, #4
 8100bbc:	f003 0201 	and.w	r2, r3, #1
 8100bc0:	69fb      	ldr	r3, [r7, #28]
 8100bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8100bc6:	69ba      	ldr	r2, [r7, #24]
 8100bc8:	4313      	orrs	r3, r2
 8100bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	69ba      	ldr	r2, [r7, #24]
 8100bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100bd2:	683b      	ldr	r3, [r7, #0]
 8100bd4:	685b      	ldr	r3, [r3, #4]
 8100bd6:	f003 0303 	and.w	r3, r3, #3
 8100bda:	2b03      	cmp	r3, #3
 8100bdc:	d017      	beq.n	8100c0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100bde:	687b      	ldr	r3, [r7, #4]
 8100be0:	68db      	ldr	r3, [r3, #12]
 8100be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100be4:	69fb      	ldr	r3, [r7, #28]
 8100be6:	005b      	lsls	r3, r3, #1
 8100be8:	2203      	movs	r2, #3
 8100bea:	fa02 f303 	lsl.w	r3, r2, r3
 8100bee:	43db      	mvns	r3, r3
 8100bf0:	69ba      	ldr	r2, [r7, #24]
 8100bf2:	4013      	ands	r3, r2
 8100bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	689a      	ldr	r2, [r3, #8]
 8100bfa:	69fb      	ldr	r3, [r7, #28]
 8100bfc:	005b      	lsls	r3, r3, #1
 8100bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8100c02:	69ba      	ldr	r2, [r7, #24]
 8100c04:	4313      	orrs	r3, r2
 8100c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c08:	687b      	ldr	r3, [r7, #4]
 8100c0a:	69ba      	ldr	r2, [r7, #24]
 8100c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c0e:	683b      	ldr	r3, [r7, #0]
 8100c10:	685b      	ldr	r3, [r3, #4]
 8100c12:	f003 0303 	and.w	r3, r3, #3
 8100c16:	2b02      	cmp	r3, #2
 8100c18:	d123      	bne.n	8100c62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c1a:	69fb      	ldr	r3, [r7, #28]
 8100c1c:	08da      	lsrs	r2, r3, #3
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	3208      	adds	r2, #8
 8100c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100c28:	69fb      	ldr	r3, [r7, #28]
 8100c2a:	f003 0307 	and.w	r3, r3, #7
 8100c2e:	009b      	lsls	r3, r3, #2
 8100c30:	220f      	movs	r2, #15
 8100c32:	fa02 f303 	lsl.w	r3, r2, r3
 8100c36:	43db      	mvns	r3, r3
 8100c38:	69ba      	ldr	r2, [r7, #24]
 8100c3a:	4013      	ands	r3, r2
 8100c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100c3e:	683b      	ldr	r3, [r7, #0]
 8100c40:	691a      	ldr	r2, [r3, #16]
 8100c42:	69fb      	ldr	r3, [r7, #28]
 8100c44:	f003 0307 	and.w	r3, r3, #7
 8100c48:	009b      	lsls	r3, r3, #2
 8100c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c4e:	69ba      	ldr	r2, [r7, #24]
 8100c50:	4313      	orrs	r3, r2
 8100c52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100c54:	69fb      	ldr	r3, [r7, #28]
 8100c56:	08da      	lsrs	r2, r3, #3
 8100c58:	687b      	ldr	r3, [r7, #4]
 8100c5a:	3208      	adds	r2, #8
 8100c5c:	69b9      	ldr	r1, [r7, #24]
 8100c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100c62:	687b      	ldr	r3, [r7, #4]
 8100c64:	681b      	ldr	r3, [r3, #0]
 8100c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100c68:	69fb      	ldr	r3, [r7, #28]
 8100c6a:	005b      	lsls	r3, r3, #1
 8100c6c:	2203      	movs	r2, #3
 8100c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c72:	43db      	mvns	r3, r3
 8100c74:	69ba      	ldr	r2, [r7, #24]
 8100c76:	4013      	ands	r3, r2
 8100c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100c7a:	683b      	ldr	r3, [r7, #0]
 8100c7c:	685b      	ldr	r3, [r3, #4]
 8100c7e:	f003 0203 	and.w	r2, r3, #3
 8100c82:	69fb      	ldr	r3, [r7, #28]
 8100c84:	005b      	lsls	r3, r3, #1
 8100c86:	fa02 f303 	lsl.w	r3, r2, r3
 8100c8a:	69ba      	ldr	r2, [r7, #24]
 8100c8c:	4313      	orrs	r3, r2
 8100c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100c90:	687b      	ldr	r3, [r7, #4]
 8100c92:	69ba      	ldr	r2, [r7, #24]
 8100c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100c96:	683b      	ldr	r3, [r7, #0]
 8100c98:	685b      	ldr	r3, [r3, #4]
 8100c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100c9e:	2b00      	cmp	r3, #0
 8100ca0:	f000 80e0 	beq.w	8100e64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ca4:	4b2f      	ldr	r3, [pc, #188]	; (8100d64 <HAL_GPIO_Init+0x238>)
 8100ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100caa:	4a2e      	ldr	r2, [pc, #184]	; (8100d64 <HAL_GPIO_Init+0x238>)
 8100cac:	f043 0302 	orr.w	r3, r3, #2
 8100cb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100cb4:	4b2b      	ldr	r3, [pc, #172]	; (8100d64 <HAL_GPIO_Init+0x238>)
 8100cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cba:	f003 0302 	and.w	r3, r3, #2
 8100cbe:	60fb      	str	r3, [r7, #12]
 8100cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100cc2:	4a29      	ldr	r2, [pc, #164]	; (8100d68 <HAL_GPIO_Init+0x23c>)
 8100cc4:	69fb      	ldr	r3, [r7, #28]
 8100cc6:	089b      	lsrs	r3, r3, #2
 8100cc8:	3302      	adds	r3, #2
 8100cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100cd0:	69fb      	ldr	r3, [r7, #28]
 8100cd2:	f003 0303 	and.w	r3, r3, #3
 8100cd6:	009b      	lsls	r3, r3, #2
 8100cd8:	220f      	movs	r2, #15
 8100cda:	fa02 f303 	lsl.w	r3, r2, r3
 8100cde:	43db      	mvns	r3, r3
 8100ce0:	69ba      	ldr	r2, [r7, #24]
 8100ce2:	4013      	ands	r3, r2
 8100ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100ce6:	687b      	ldr	r3, [r7, #4]
 8100ce8:	4a20      	ldr	r2, [pc, #128]	; (8100d6c <HAL_GPIO_Init+0x240>)
 8100cea:	4293      	cmp	r3, r2
 8100cec:	d052      	beq.n	8100d94 <HAL_GPIO_Init+0x268>
 8100cee:	687b      	ldr	r3, [r7, #4]
 8100cf0:	4a1f      	ldr	r2, [pc, #124]	; (8100d70 <HAL_GPIO_Init+0x244>)
 8100cf2:	4293      	cmp	r3, r2
 8100cf4:	d031      	beq.n	8100d5a <HAL_GPIO_Init+0x22e>
 8100cf6:	687b      	ldr	r3, [r7, #4]
 8100cf8:	4a1e      	ldr	r2, [pc, #120]	; (8100d74 <HAL_GPIO_Init+0x248>)
 8100cfa:	4293      	cmp	r3, r2
 8100cfc:	d02b      	beq.n	8100d56 <HAL_GPIO_Init+0x22a>
 8100cfe:	687b      	ldr	r3, [r7, #4]
 8100d00:	4a1d      	ldr	r2, [pc, #116]	; (8100d78 <HAL_GPIO_Init+0x24c>)
 8100d02:	4293      	cmp	r3, r2
 8100d04:	d025      	beq.n	8100d52 <HAL_GPIO_Init+0x226>
 8100d06:	687b      	ldr	r3, [r7, #4]
 8100d08:	4a1c      	ldr	r2, [pc, #112]	; (8100d7c <HAL_GPIO_Init+0x250>)
 8100d0a:	4293      	cmp	r3, r2
 8100d0c:	d01f      	beq.n	8100d4e <HAL_GPIO_Init+0x222>
 8100d0e:	687b      	ldr	r3, [r7, #4]
 8100d10:	4a1b      	ldr	r2, [pc, #108]	; (8100d80 <HAL_GPIO_Init+0x254>)
 8100d12:	4293      	cmp	r3, r2
 8100d14:	d019      	beq.n	8100d4a <HAL_GPIO_Init+0x21e>
 8100d16:	687b      	ldr	r3, [r7, #4]
 8100d18:	4a1a      	ldr	r2, [pc, #104]	; (8100d84 <HAL_GPIO_Init+0x258>)
 8100d1a:	4293      	cmp	r3, r2
 8100d1c:	d013      	beq.n	8100d46 <HAL_GPIO_Init+0x21a>
 8100d1e:	687b      	ldr	r3, [r7, #4]
 8100d20:	4a19      	ldr	r2, [pc, #100]	; (8100d88 <HAL_GPIO_Init+0x25c>)
 8100d22:	4293      	cmp	r3, r2
 8100d24:	d00d      	beq.n	8100d42 <HAL_GPIO_Init+0x216>
 8100d26:	687b      	ldr	r3, [r7, #4]
 8100d28:	4a18      	ldr	r2, [pc, #96]	; (8100d8c <HAL_GPIO_Init+0x260>)
 8100d2a:	4293      	cmp	r3, r2
 8100d2c:	d007      	beq.n	8100d3e <HAL_GPIO_Init+0x212>
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	4a17      	ldr	r2, [pc, #92]	; (8100d90 <HAL_GPIO_Init+0x264>)
 8100d32:	4293      	cmp	r3, r2
 8100d34:	d101      	bne.n	8100d3a <HAL_GPIO_Init+0x20e>
 8100d36:	2309      	movs	r3, #9
 8100d38:	e02d      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d3a:	230a      	movs	r3, #10
 8100d3c:	e02b      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d3e:	2308      	movs	r3, #8
 8100d40:	e029      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d42:	2307      	movs	r3, #7
 8100d44:	e027      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d46:	2306      	movs	r3, #6
 8100d48:	e025      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d4a:	2305      	movs	r3, #5
 8100d4c:	e023      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d4e:	2304      	movs	r3, #4
 8100d50:	e021      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d52:	2303      	movs	r3, #3
 8100d54:	e01f      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d56:	2302      	movs	r3, #2
 8100d58:	e01d      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d5a:	2301      	movs	r3, #1
 8100d5c:	e01b      	b.n	8100d96 <HAL_GPIO_Init+0x26a>
 8100d5e:	bf00      	nop
 8100d60:	580000c0 	.word	0x580000c0
 8100d64:	58024400 	.word	0x58024400
 8100d68:	58000400 	.word	0x58000400
 8100d6c:	58020000 	.word	0x58020000
 8100d70:	58020400 	.word	0x58020400
 8100d74:	58020800 	.word	0x58020800
 8100d78:	58020c00 	.word	0x58020c00
 8100d7c:	58021000 	.word	0x58021000
 8100d80:	58021400 	.word	0x58021400
 8100d84:	58021800 	.word	0x58021800
 8100d88:	58021c00 	.word	0x58021c00
 8100d8c:	58022000 	.word	0x58022000
 8100d90:	58022400 	.word	0x58022400
 8100d94:	2300      	movs	r3, #0
 8100d96:	69fa      	ldr	r2, [r7, #28]
 8100d98:	f002 0203 	and.w	r2, r2, #3
 8100d9c:	0092      	lsls	r2, r2, #2
 8100d9e:	4093      	lsls	r3, r2
 8100da0:	69ba      	ldr	r2, [r7, #24]
 8100da2:	4313      	orrs	r3, r2
 8100da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100da6:	4938      	ldr	r1, [pc, #224]	; (8100e88 <HAL_GPIO_Init+0x35c>)
 8100da8:	69fb      	ldr	r3, [r7, #28]
 8100daa:	089b      	lsrs	r3, r3, #2
 8100dac:	3302      	adds	r3, #2
 8100dae:	69ba      	ldr	r2, [r7, #24]
 8100db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100db8:	681b      	ldr	r3, [r3, #0]
 8100dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100dbc:	693b      	ldr	r3, [r7, #16]
 8100dbe:	43db      	mvns	r3, r3
 8100dc0:	69ba      	ldr	r2, [r7, #24]
 8100dc2:	4013      	ands	r3, r2
 8100dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100dc6:	683b      	ldr	r3, [r7, #0]
 8100dc8:	685b      	ldr	r3, [r3, #4]
 8100dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100dce:	2b00      	cmp	r3, #0
 8100dd0:	d003      	beq.n	8100dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100dd2:	69ba      	ldr	r2, [r7, #24]
 8100dd4:	693b      	ldr	r3, [r7, #16]
 8100dd6:	4313      	orrs	r3, r2
 8100dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100dde:	69bb      	ldr	r3, [r7, #24]
 8100de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100de6:	685b      	ldr	r3, [r3, #4]
 8100de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100dea:	693b      	ldr	r3, [r7, #16]
 8100dec:	43db      	mvns	r3, r3
 8100dee:	69ba      	ldr	r2, [r7, #24]
 8100df0:	4013      	ands	r3, r2
 8100df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100df4:	683b      	ldr	r3, [r7, #0]
 8100df6:	685b      	ldr	r3, [r3, #4]
 8100df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100dfc:	2b00      	cmp	r3, #0
 8100dfe:	d003      	beq.n	8100e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e00:	69ba      	ldr	r2, [r7, #24]
 8100e02:	693b      	ldr	r3, [r7, #16]
 8100e04:	4313      	orrs	r3, r2
 8100e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e0c:	69bb      	ldr	r3, [r7, #24]
 8100e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100e10:	697b      	ldr	r3, [r7, #20]
 8100e12:	685b      	ldr	r3, [r3, #4]
 8100e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e16:	693b      	ldr	r3, [r7, #16]
 8100e18:	43db      	mvns	r3, r3
 8100e1a:	69ba      	ldr	r2, [r7, #24]
 8100e1c:	4013      	ands	r3, r2
 8100e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100e20:	683b      	ldr	r3, [r7, #0]
 8100e22:	685b      	ldr	r3, [r3, #4]
 8100e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e28:	2b00      	cmp	r3, #0
 8100e2a:	d003      	beq.n	8100e34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100e2c:	69ba      	ldr	r2, [r7, #24]
 8100e2e:	693b      	ldr	r3, [r7, #16]
 8100e30:	4313      	orrs	r3, r2
 8100e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100e34:	697b      	ldr	r3, [r7, #20]
 8100e36:	69ba      	ldr	r2, [r7, #24]
 8100e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100e3a:	697b      	ldr	r3, [r7, #20]
 8100e3c:	681b      	ldr	r3, [r3, #0]
 8100e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e40:	693b      	ldr	r3, [r7, #16]
 8100e42:	43db      	mvns	r3, r3
 8100e44:	69ba      	ldr	r2, [r7, #24]
 8100e46:	4013      	ands	r3, r2
 8100e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100e4a:	683b      	ldr	r3, [r7, #0]
 8100e4c:	685b      	ldr	r3, [r3, #4]
 8100e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d003      	beq.n	8100e5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100e56:	69ba      	ldr	r2, [r7, #24]
 8100e58:	693b      	ldr	r3, [r7, #16]
 8100e5a:	4313      	orrs	r3, r2
 8100e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100e5e:	697b      	ldr	r3, [r7, #20]
 8100e60:	69ba      	ldr	r2, [r7, #24]
 8100e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100e64:	69fb      	ldr	r3, [r7, #28]
 8100e66:	3301      	adds	r3, #1
 8100e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100e6a:	683b      	ldr	r3, [r7, #0]
 8100e6c:	681a      	ldr	r2, [r3, #0]
 8100e6e:	69fb      	ldr	r3, [r7, #28]
 8100e70:	fa22 f303 	lsr.w	r3, r2, r3
 8100e74:	2b00      	cmp	r3, #0
 8100e76:	f47f ae63 	bne.w	8100b40 <HAL_GPIO_Init+0x14>
  }
}
 8100e7a:	bf00      	nop
 8100e7c:	bf00      	nop
 8100e7e:	3724      	adds	r7, #36	; 0x24
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr
 8100e88:	58000400 	.word	0x58000400

08100e8c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100e8c:	b480      	push	{r7}
 8100e8e:	b083      	sub	sp, #12
 8100e90:	af00      	add	r7, sp, #0
 8100e92:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100e94:	4b05      	ldr	r3, [pc, #20]	; (8100eac <HAL_HSEM_ActivateNotification+0x20>)
 8100e96:	681a      	ldr	r2, [r3, #0]
 8100e98:	4904      	ldr	r1, [pc, #16]	; (8100eac <HAL_HSEM_ActivateNotification+0x20>)
 8100e9a:	687b      	ldr	r3, [r7, #4]
 8100e9c:	4313      	orrs	r3, r2
 8100e9e:	600b      	str	r3, [r1, #0]
#endif
}
 8100ea0:	bf00      	nop
 8100ea2:	370c      	adds	r7, #12
 8100ea4:	46bd      	mov	sp, r7
 8100ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eaa:	4770      	bx	lr
 8100eac:	58026510 	.word	0x58026510

08100eb0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100eb0:	b580      	push	{r7, lr}
 8100eb2:	b084      	sub	sp, #16
 8100eb4:	af00      	add	r7, sp, #0
 8100eb6:	60f8      	str	r0, [r7, #12]
 8100eb8:	460b      	mov	r3, r1
 8100eba:	607a      	str	r2, [r7, #4]
 8100ebc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100ebe:	4b37      	ldr	r3, [pc, #220]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ec0:	681b      	ldr	r3, [r3, #0]
 8100ec2:	f023 0201 	bic.w	r2, r3, #1
 8100ec6:	4935      	ldr	r1, [pc, #212]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ec8:	68fb      	ldr	r3, [r7, #12]
 8100eca:	4313      	orrs	r3, r2
 8100ecc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	2b00      	cmp	r3, #0
 8100ed2:	d123      	bne.n	8100f1c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100ed4:	f7ff fe16 	bl	8100b04 <HAL_GetCurrentCPUID>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	2b03      	cmp	r3, #3
 8100edc:	d158      	bne.n	8100f90 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100ede:	4b2f      	ldr	r3, [pc, #188]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ee0:	691b      	ldr	r3, [r3, #16]
 8100ee2:	4a2e      	ldr	r2, [pc, #184]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ee4:	f023 0301 	bic.w	r3, r3, #1
 8100ee8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100eea:	4b2d      	ldr	r3, [pc, #180]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100eec:	691b      	ldr	r3, [r3, #16]
 8100eee:	4a2c      	ldr	r2, [pc, #176]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ef0:	f043 0304 	orr.w	r3, r3, #4
 8100ef4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100ef6:	f3bf 8f4f 	dsb	sy
}
 8100efa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100efc:	f3bf 8f6f 	isb	sy
}
 8100f00:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f02:	7afb      	ldrb	r3, [r7, #11]
 8100f04:	2b01      	cmp	r3, #1
 8100f06:	d101      	bne.n	8100f0c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f08:	bf30      	wfi
 8100f0a:	e000      	b.n	8100f0e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f0c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f0e:	4b24      	ldr	r3, [pc, #144]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f10:	691b      	ldr	r3, [r3, #16]
 8100f12:	4a23      	ldr	r2, [pc, #140]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f14:	f023 0304 	bic.w	r3, r3, #4
 8100f18:	6113      	str	r3, [r2, #16]
 8100f1a:	e03c      	b.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	2b01      	cmp	r3, #1
 8100f20:	d123      	bne.n	8100f6a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100f22:	f7ff fdef 	bl	8100b04 <HAL_GetCurrentCPUID>
 8100f26:	4603      	mov	r3, r0
 8100f28:	2b01      	cmp	r3, #1
 8100f2a:	d133      	bne.n	8100f94 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100f2c:	4b1b      	ldr	r3, [pc, #108]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f2e:	695b      	ldr	r3, [r3, #20]
 8100f30:	4a1a      	ldr	r2, [pc, #104]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f32:	f023 0302 	bic.w	r3, r3, #2
 8100f36:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f38:	4b19      	ldr	r3, [pc, #100]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f3a:	691b      	ldr	r3, [r3, #16]
 8100f3c:	4a18      	ldr	r2, [pc, #96]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f3e:	f043 0304 	orr.w	r3, r3, #4
 8100f42:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100f44:	f3bf 8f4f 	dsb	sy
}
 8100f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f4a:	f3bf 8f6f 	isb	sy
}
 8100f4e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f50:	7afb      	ldrb	r3, [r7, #11]
 8100f52:	2b01      	cmp	r3, #1
 8100f54:	d101      	bne.n	8100f5a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f56:	bf30      	wfi
 8100f58:	e000      	b.n	8100f5c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f5a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f5c:	4b10      	ldr	r3, [pc, #64]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f5e:	691b      	ldr	r3, [r3, #16]
 8100f60:	4a0f      	ldr	r2, [pc, #60]	; (8100fa0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f62:	f023 0304 	bic.w	r3, r3, #4
 8100f66:	6113      	str	r3, [r2, #16]
 8100f68:	e015      	b.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100f6a:	f7ff fdcb 	bl	8100b04 <HAL_GetCurrentCPUID>
 8100f6e:	4603      	mov	r3, r0
 8100f70:	2b03      	cmp	r3, #3
 8100f72:	d106      	bne.n	8100f82 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100f74:	4b09      	ldr	r3, [pc, #36]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f76:	691b      	ldr	r3, [r3, #16]
 8100f78:	4a08      	ldr	r2, [pc, #32]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f7a:	f023 0304 	bic.w	r3, r3, #4
 8100f7e:	6113      	str	r3, [r2, #16]
 8100f80:	e009      	b.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100f82:	4b06      	ldr	r3, [pc, #24]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f84:	695b      	ldr	r3, [r3, #20]
 8100f86:	4a05      	ldr	r2, [pc, #20]	; (8100f9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f88:	f023 0304 	bic.w	r3, r3, #4
 8100f8c:	6153      	str	r3, [r2, #20]
 8100f8e:	e002      	b.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100f90:	bf00      	nop
 8100f92:	e000      	b.n	8100f96 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100f94:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100f96:	3710      	adds	r7, #16
 8100f98:	46bd      	mov	sp, r7
 8100f9a:	bd80      	pop	{r7, pc}
 8100f9c:	58024800 	.word	0x58024800
 8100fa0:	e000ed00 	.word	0xe000ed00

08100fa4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100fa8:	f7ff fdac 	bl	8100b04 <HAL_GetCurrentCPUID>
 8100fac:	4603      	mov	r3, r0
 8100fae:	2b03      	cmp	r3, #3
 8100fb0:	d101      	bne.n	8100fb6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100fb2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100fb4:	e001      	b.n	8100fba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100fb6:	bf40      	sev
    __WFE ();
 8100fb8:	bf20      	wfe
}
 8100fba:	bf00      	nop
 8100fbc:	bd80      	pop	{r7, pc}
	...

08100fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100fc0:	b480      	push	{r7}
 8100fc2:	b089      	sub	sp, #36	; 0x24
 8100fc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100fc6:	4bb3      	ldr	r3, [pc, #716]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fc8:	691b      	ldr	r3, [r3, #16]
 8100fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100fce:	2b18      	cmp	r3, #24
 8100fd0:	f200 8155 	bhi.w	810127e <HAL_RCC_GetSysClockFreq+0x2be>
 8100fd4:	a201      	add	r2, pc, #4	; (adr r2, 8100fdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8100fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100fda:	bf00      	nop
 8100fdc:	08101041 	.word	0x08101041
 8100fe0:	0810127f 	.word	0x0810127f
 8100fe4:	0810127f 	.word	0x0810127f
 8100fe8:	0810127f 	.word	0x0810127f
 8100fec:	0810127f 	.word	0x0810127f
 8100ff0:	0810127f 	.word	0x0810127f
 8100ff4:	0810127f 	.word	0x0810127f
 8100ff8:	0810127f 	.word	0x0810127f
 8100ffc:	08101067 	.word	0x08101067
 8101000:	0810127f 	.word	0x0810127f
 8101004:	0810127f 	.word	0x0810127f
 8101008:	0810127f 	.word	0x0810127f
 810100c:	0810127f 	.word	0x0810127f
 8101010:	0810127f 	.word	0x0810127f
 8101014:	0810127f 	.word	0x0810127f
 8101018:	0810127f 	.word	0x0810127f
 810101c:	0810106d 	.word	0x0810106d
 8101020:	0810127f 	.word	0x0810127f
 8101024:	0810127f 	.word	0x0810127f
 8101028:	0810127f 	.word	0x0810127f
 810102c:	0810127f 	.word	0x0810127f
 8101030:	0810127f 	.word	0x0810127f
 8101034:	0810127f 	.word	0x0810127f
 8101038:	0810127f 	.word	0x0810127f
 810103c:	08101073 	.word	0x08101073
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101040:	4b94      	ldr	r3, [pc, #592]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101042:	681b      	ldr	r3, [r3, #0]
 8101044:	f003 0320 	and.w	r3, r3, #32
 8101048:	2b00      	cmp	r3, #0
 810104a:	d009      	beq.n	8101060 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810104c:	4b91      	ldr	r3, [pc, #580]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810104e:	681b      	ldr	r3, [r3, #0]
 8101050:	08db      	lsrs	r3, r3, #3
 8101052:	f003 0303 	and.w	r3, r3, #3
 8101056:	4a90      	ldr	r2, [pc, #576]	; (8101298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101058:	fa22 f303 	lsr.w	r3, r2, r3
 810105c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810105e:	e111      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101060:	4b8d      	ldr	r3, [pc, #564]	; (8101298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101062:	61bb      	str	r3, [r7, #24]
    break;
 8101064:	e10e      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101066:	4b8d      	ldr	r3, [pc, #564]	; (810129c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101068:	61bb      	str	r3, [r7, #24]
    break;
 810106a:	e10b      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810106c:	4b8c      	ldr	r3, [pc, #560]	; (81012a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810106e:	61bb      	str	r3, [r7, #24]
    break;
 8101070:	e108      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101072:	4b88      	ldr	r3, [pc, #544]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101076:	f003 0303 	and.w	r3, r3, #3
 810107a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810107c:	4b85      	ldr	r3, [pc, #532]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101080:	091b      	lsrs	r3, r3, #4
 8101082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101086:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101088:	4b82      	ldr	r3, [pc, #520]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810108c:	f003 0301 	and.w	r3, r3, #1
 8101090:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101092:	4b80      	ldr	r3, [pc, #512]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101096:	08db      	lsrs	r3, r3, #3
 8101098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810109c:	68fa      	ldr	r2, [r7, #12]
 810109e:	fb02 f303 	mul.w	r3, r2, r3
 81010a2:	ee07 3a90 	vmov	s15, r3
 81010a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81010ae:	693b      	ldr	r3, [r7, #16]
 81010b0:	2b00      	cmp	r3, #0
 81010b2:	f000 80e1 	beq.w	8101278 <HAL_RCC_GetSysClockFreq+0x2b8>
 81010b6:	697b      	ldr	r3, [r7, #20]
 81010b8:	2b02      	cmp	r3, #2
 81010ba:	f000 8083 	beq.w	81011c4 <HAL_RCC_GetSysClockFreq+0x204>
 81010be:	697b      	ldr	r3, [r7, #20]
 81010c0:	2b02      	cmp	r3, #2
 81010c2:	f200 80a1 	bhi.w	8101208 <HAL_RCC_GetSysClockFreq+0x248>
 81010c6:	697b      	ldr	r3, [r7, #20]
 81010c8:	2b00      	cmp	r3, #0
 81010ca:	d003      	beq.n	81010d4 <HAL_RCC_GetSysClockFreq+0x114>
 81010cc:	697b      	ldr	r3, [r7, #20]
 81010ce:	2b01      	cmp	r3, #1
 81010d0:	d056      	beq.n	8101180 <HAL_RCC_GetSysClockFreq+0x1c0>
 81010d2:	e099      	b.n	8101208 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81010d4:	4b6f      	ldr	r3, [pc, #444]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010d6:	681b      	ldr	r3, [r3, #0]
 81010d8:	f003 0320 	and.w	r3, r3, #32
 81010dc:	2b00      	cmp	r3, #0
 81010de:	d02d      	beq.n	810113c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81010e0:	4b6c      	ldr	r3, [pc, #432]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010e2:	681b      	ldr	r3, [r3, #0]
 81010e4:	08db      	lsrs	r3, r3, #3
 81010e6:	f003 0303 	and.w	r3, r3, #3
 81010ea:	4a6b      	ldr	r2, [pc, #428]	; (8101298 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81010ec:	fa22 f303 	lsr.w	r3, r2, r3
 81010f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81010f2:	687b      	ldr	r3, [r7, #4]
 81010f4:	ee07 3a90 	vmov	s15, r3
 81010f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010fc:	693b      	ldr	r3, [r7, #16]
 81010fe:	ee07 3a90 	vmov	s15, r3
 8101102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810110a:	4b62      	ldr	r3, [pc, #392]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810110e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101112:	ee07 3a90 	vmov	s15, r3
 8101116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810111a:	ed97 6a02 	vldr	s12, [r7, #8]
 810111e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81012a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810112a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810112e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810113a:	e087      	b.n	810124c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810113c:	693b      	ldr	r3, [r7, #16]
 810113e:	ee07 3a90 	vmov	s15, r3
 8101142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101146:	eddf 6a58 	vldr	s13, [pc, #352]	; 81012a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810114a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810114e:	4b51      	ldr	r3, [pc, #324]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101156:	ee07 3a90 	vmov	s15, r3
 810115a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810115e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101162:	eddf 5a50 	vldr	s11, [pc, #320]	; 81012a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810116a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810116e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101176:	ee67 7a27 	vmul.f32	s15, s14, s15
 810117a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810117e:	e065      	b.n	810124c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101180:	693b      	ldr	r3, [r7, #16]
 8101182:	ee07 3a90 	vmov	s15, r3
 8101186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810118a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81012ac <HAL_RCC_GetSysClockFreq+0x2ec>
 810118e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101192:	4b40      	ldr	r3, [pc, #256]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810119a:	ee07 3a90 	vmov	s15, r3
 810119e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81011a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81012a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81011c2:	e043      	b.n	810124c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81011c4:	693b      	ldr	r3, [r7, #16]
 81011c6:	ee07 3a90 	vmov	s15, r3
 81011ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 81012b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81011d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011d6:	4b2f      	ldr	r3, [pc, #188]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011de:	ee07 3a90 	vmov	s15, r3
 81011e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81011ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81012a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101206:	e021      	b.n	810124c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101208:	693b      	ldr	r3, [r7, #16]
 810120a:	ee07 3a90 	vmov	s15, r3
 810120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101212:	eddf 6a26 	vldr	s13, [pc, #152]	; 81012ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8101216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810121a:	4b1e      	ldr	r3, [pc, #120]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810121e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101222:	ee07 3a90 	vmov	s15, r3
 8101226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810122a:	ed97 6a02 	vldr	s12, [r7, #8]
 810122e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81012a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810123a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810123e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810124a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810124c:	4b11      	ldr	r3, [pc, #68]	; (8101294 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101250:	0a5b      	lsrs	r3, r3, #9
 8101252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101256:	3301      	adds	r3, #1
 8101258:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810125a:	683b      	ldr	r3, [r7, #0]
 810125c:	ee07 3a90 	vmov	s15, r3
 8101260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101264:	edd7 6a07 	vldr	s13, [r7, #28]
 8101268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101270:	ee17 3a90 	vmov	r3, s15
 8101274:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101276:	e005      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101278:	2300      	movs	r3, #0
 810127a:	61bb      	str	r3, [r7, #24]
    break;
 810127c:	e002      	b.n	8101284 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810127e:	4b07      	ldr	r3, [pc, #28]	; (810129c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101280:	61bb      	str	r3, [r7, #24]
    break;
 8101282:	bf00      	nop
  }

  return sysclockfreq;
 8101284:	69bb      	ldr	r3, [r7, #24]
}
 8101286:	4618      	mov	r0, r3
 8101288:	3724      	adds	r7, #36	; 0x24
 810128a:	46bd      	mov	sp, r7
 810128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101290:	4770      	bx	lr
 8101292:	bf00      	nop
 8101294:	58024400 	.word	0x58024400
 8101298:	03d09000 	.word	0x03d09000
 810129c:	003d0900 	.word	0x003d0900
 81012a0:	007a1200 	.word	0x007a1200
 81012a4:	46000000 	.word	0x46000000
 81012a8:	4c742400 	.word	0x4c742400
 81012ac:	4a742400 	.word	0x4a742400
 81012b0:	4af42400 	.word	0x4af42400

081012b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81012b4:	b580      	push	{r7, lr}
 81012b6:	b082      	sub	sp, #8
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	2b00      	cmp	r3, #0
 81012c0:	d101      	bne.n	81012c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81012c2:	2301      	movs	r3, #1
 81012c4:	e049      	b.n	810135a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81012cc:	b2db      	uxtb	r3, r3
 81012ce:	2b00      	cmp	r3, #0
 81012d0:	d106      	bne.n	81012e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	2200      	movs	r2, #0
 81012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81012da:	6878      	ldr	r0, [r7, #4]
 81012dc:	f7ff f998 	bl	8100610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	2202      	movs	r2, #2
 81012e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	681a      	ldr	r2, [r3, #0]
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	3304      	adds	r3, #4
 81012f0:	4619      	mov	r1, r3
 81012f2:	4610      	mov	r0, r2
 81012f4:	f000 fa58 	bl	81017a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	2201      	movs	r2, #1
 81012fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	2201      	movs	r2, #1
 8101304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	2201      	movs	r2, #1
 810130c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	2201      	movs	r2, #1
 8101314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	2201      	movs	r2, #1
 810131c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	2201      	movs	r2, #1
 8101324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	2201      	movs	r2, #1
 810132c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	2201      	movs	r2, #1
 8101334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101338:	687b      	ldr	r3, [r7, #4]
 810133a:	2201      	movs	r2, #1
 810133c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	2201      	movs	r2, #1
 8101344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	2201      	movs	r2, #1
 810134c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	2201      	movs	r2, #1
 8101354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101358:	2300      	movs	r3, #0
}
 810135a:	4618      	mov	r0, r3
 810135c:	3708      	adds	r7, #8
 810135e:	46bd      	mov	sp, r7
 8101360:	bd80      	pop	{r7, pc}
	...

08101364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b084      	sub	sp, #16
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
 810136c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810136e:	683b      	ldr	r3, [r7, #0]
 8101370:	2b00      	cmp	r3, #0
 8101372:	d109      	bne.n	8101388 <HAL_TIM_PWM_Start+0x24>
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810137a:	b2db      	uxtb	r3, r3
 810137c:	2b01      	cmp	r3, #1
 810137e:	bf14      	ite	ne
 8101380:	2301      	movne	r3, #1
 8101382:	2300      	moveq	r3, #0
 8101384:	b2db      	uxtb	r3, r3
 8101386:	e03c      	b.n	8101402 <HAL_TIM_PWM_Start+0x9e>
 8101388:	683b      	ldr	r3, [r7, #0]
 810138a:	2b04      	cmp	r3, #4
 810138c:	d109      	bne.n	81013a2 <HAL_TIM_PWM_Start+0x3e>
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8101394:	b2db      	uxtb	r3, r3
 8101396:	2b01      	cmp	r3, #1
 8101398:	bf14      	ite	ne
 810139a:	2301      	movne	r3, #1
 810139c:	2300      	moveq	r3, #0
 810139e:	b2db      	uxtb	r3, r3
 81013a0:	e02f      	b.n	8101402 <HAL_TIM_PWM_Start+0x9e>
 81013a2:	683b      	ldr	r3, [r7, #0]
 81013a4:	2b08      	cmp	r3, #8
 81013a6:	d109      	bne.n	81013bc <HAL_TIM_PWM_Start+0x58>
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81013ae:	b2db      	uxtb	r3, r3
 81013b0:	2b01      	cmp	r3, #1
 81013b2:	bf14      	ite	ne
 81013b4:	2301      	movne	r3, #1
 81013b6:	2300      	moveq	r3, #0
 81013b8:	b2db      	uxtb	r3, r3
 81013ba:	e022      	b.n	8101402 <HAL_TIM_PWM_Start+0x9e>
 81013bc:	683b      	ldr	r3, [r7, #0]
 81013be:	2b0c      	cmp	r3, #12
 81013c0:	d109      	bne.n	81013d6 <HAL_TIM_PWM_Start+0x72>
 81013c2:	687b      	ldr	r3, [r7, #4]
 81013c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81013c8:	b2db      	uxtb	r3, r3
 81013ca:	2b01      	cmp	r3, #1
 81013cc:	bf14      	ite	ne
 81013ce:	2301      	movne	r3, #1
 81013d0:	2300      	moveq	r3, #0
 81013d2:	b2db      	uxtb	r3, r3
 81013d4:	e015      	b.n	8101402 <HAL_TIM_PWM_Start+0x9e>
 81013d6:	683b      	ldr	r3, [r7, #0]
 81013d8:	2b10      	cmp	r3, #16
 81013da:	d109      	bne.n	81013f0 <HAL_TIM_PWM_Start+0x8c>
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81013e2:	b2db      	uxtb	r3, r3
 81013e4:	2b01      	cmp	r3, #1
 81013e6:	bf14      	ite	ne
 81013e8:	2301      	movne	r3, #1
 81013ea:	2300      	moveq	r3, #0
 81013ec:	b2db      	uxtb	r3, r3
 81013ee:	e008      	b.n	8101402 <HAL_TIM_PWM_Start+0x9e>
 81013f0:	687b      	ldr	r3, [r7, #4]
 81013f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81013f6:	b2db      	uxtb	r3, r3
 81013f8:	2b01      	cmp	r3, #1
 81013fa:	bf14      	ite	ne
 81013fc:	2301      	movne	r3, #1
 81013fe:	2300      	moveq	r3, #0
 8101400:	b2db      	uxtb	r3, r3
 8101402:	2b00      	cmp	r3, #0
 8101404:	d001      	beq.n	810140a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8101406:	2301      	movs	r3, #1
 8101408:	e0a1      	b.n	810154e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810140a:	683b      	ldr	r3, [r7, #0]
 810140c:	2b00      	cmp	r3, #0
 810140e:	d104      	bne.n	810141a <HAL_TIM_PWM_Start+0xb6>
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	2202      	movs	r2, #2
 8101414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101418:	e023      	b.n	8101462 <HAL_TIM_PWM_Start+0xfe>
 810141a:	683b      	ldr	r3, [r7, #0]
 810141c:	2b04      	cmp	r3, #4
 810141e:	d104      	bne.n	810142a <HAL_TIM_PWM_Start+0xc6>
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	2202      	movs	r2, #2
 8101424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101428:	e01b      	b.n	8101462 <HAL_TIM_PWM_Start+0xfe>
 810142a:	683b      	ldr	r3, [r7, #0]
 810142c:	2b08      	cmp	r3, #8
 810142e:	d104      	bne.n	810143a <HAL_TIM_PWM_Start+0xd6>
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	2202      	movs	r2, #2
 8101434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101438:	e013      	b.n	8101462 <HAL_TIM_PWM_Start+0xfe>
 810143a:	683b      	ldr	r3, [r7, #0]
 810143c:	2b0c      	cmp	r3, #12
 810143e:	d104      	bne.n	810144a <HAL_TIM_PWM_Start+0xe6>
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	2202      	movs	r2, #2
 8101444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101448:	e00b      	b.n	8101462 <HAL_TIM_PWM_Start+0xfe>
 810144a:	683b      	ldr	r3, [r7, #0]
 810144c:	2b10      	cmp	r3, #16
 810144e:	d104      	bne.n	810145a <HAL_TIM_PWM_Start+0xf6>
 8101450:	687b      	ldr	r3, [r7, #4]
 8101452:	2202      	movs	r2, #2
 8101454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101458:	e003      	b.n	8101462 <HAL_TIM_PWM_Start+0xfe>
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	2202      	movs	r2, #2
 810145e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	681b      	ldr	r3, [r3, #0]
 8101466:	2201      	movs	r2, #1
 8101468:	6839      	ldr	r1, [r7, #0]
 810146a:	4618      	mov	r0, r3
 810146c:	f000 fd0c 	bl	8101e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	681b      	ldr	r3, [r3, #0]
 8101474:	4a38      	ldr	r2, [pc, #224]	; (8101558 <HAL_TIM_PWM_Start+0x1f4>)
 8101476:	4293      	cmp	r3, r2
 8101478:	d013      	beq.n	81014a2 <HAL_TIM_PWM_Start+0x13e>
 810147a:	687b      	ldr	r3, [r7, #4]
 810147c:	681b      	ldr	r3, [r3, #0]
 810147e:	4a37      	ldr	r2, [pc, #220]	; (810155c <HAL_TIM_PWM_Start+0x1f8>)
 8101480:	4293      	cmp	r3, r2
 8101482:	d00e      	beq.n	81014a2 <HAL_TIM_PWM_Start+0x13e>
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	4a35      	ldr	r2, [pc, #212]	; (8101560 <HAL_TIM_PWM_Start+0x1fc>)
 810148a:	4293      	cmp	r3, r2
 810148c:	d009      	beq.n	81014a2 <HAL_TIM_PWM_Start+0x13e>
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	681b      	ldr	r3, [r3, #0]
 8101492:	4a34      	ldr	r2, [pc, #208]	; (8101564 <HAL_TIM_PWM_Start+0x200>)
 8101494:	4293      	cmp	r3, r2
 8101496:	d004      	beq.n	81014a2 <HAL_TIM_PWM_Start+0x13e>
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	681b      	ldr	r3, [r3, #0]
 810149c:	4a32      	ldr	r2, [pc, #200]	; (8101568 <HAL_TIM_PWM_Start+0x204>)
 810149e:	4293      	cmp	r3, r2
 81014a0:	d101      	bne.n	81014a6 <HAL_TIM_PWM_Start+0x142>
 81014a2:	2301      	movs	r3, #1
 81014a4:	e000      	b.n	81014a8 <HAL_TIM_PWM_Start+0x144>
 81014a6:	2300      	movs	r3, #0
 81014a8:	2b00      	cmp	r3, #0
 81014aa:	d007      	beq.n	81014bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81014ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	4a25      	ldr	r2, [pc, #148]	; (8101558 <HAL_TIM_PWM_Start+0x1f4>)
 81014c2:	4293      	cmp	r3, r2
 81014c4:	d022      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81014ce:	d01d      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	4a25      	ldr	r2, [pc, #148]	; (810156c <HAL_TIM_PWM_Start+0x208>)
 81014d6:	4293      	cmp	r3, r2
 81014d8:	d018      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	681b      	ldr	r3, [r3, #0]
 81014de:	4a24      	ldr	r2, [pc, #144]	; (8101570 <HAL_TIM_PWM_Start+0x20c>)
 81014e0:	4293      	cmp	r3, r2
 81014e2:	d013      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	4a22      	ldr	r2, [pc, #136]	; (8101574 <HAL_TIM_PWM_Start+0x210>)
 81014ea:	4293      	cmp	r3, r2
 81014ec:	d00e      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	681b      	ldr	r3, [r3, #0]
 81014f2:	4a1a      	ldr	r2, [pc, #104]	; (810155c <HAL_TIM_PWM_Start+0x1f8>)
 81014f4:	4293      	cmp	r3, r2
 81014f6:	d009      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	4a1e      	ldr	r2, [pc, #120]	; (8101578 <HAL_TIM_PWM_Start+0x214>)
 81014fe:	4293      	cmp	r3, r2
 8101500:	d004      	beq.n	810150c <HAL_TIM_PWM_Start+0x1a8>
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	681b      	ldr	r3, [r3, #0]
 8101506:	4a16      	ldr	r2, [pc, #88]	; (8101560 <HAL_TIM_PWM_Start+0x1fc>)
 8101508:	4293      	cmp	r3, r2
 810150a:	d115      	bne.n	8101538 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	681b      	ldr	r3, [r3, #0]
 8101510:	689a      	ldr	r2, [r3, #8]
 8101512:	4b1a      	ldr	r3, [pc, #104]	; (810157c <HAL_TIM_PWM_Start+0x218>)
 8101514:	4013      	ands	r3, r2
 8101516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101518:	68fb      	ldr	r3, [r7, #12]
 810151a:	2b06      	cmp	r3, #6
 810151c:	d015      	beq.n	810154a <HAL_TIM_PWM_Start+0x1e6>
 810151e:	68fb      	ldr	r3, [r7, #12]
 8101520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101524:	d011      	beq.n	810154a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8101526:	687b      	ldr	r3, [r7, #4]
 8101528:	681b      	ldr	r3, [r3, #0]
 810152a:	681a      	ldr	r2, [r3, #0]
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	f042 0201 	orr.w	r2, r2, #1
 8101534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101536:	e008      	b.n	810154a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	681a      	ldr	r2, [r3, #0]
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	681b      	ldr	r3, [r3, #0]
 8101542:	f042 0201 	orr.w	r2, r2, #1
 8101546:	601a      	str	r2, [r3, #0]
 8101548:	e000      	b.n	810154c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810154a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810154c:	2300      	movs	r3, #0
}
 810154e:	4618      	mov	r0, r3
 8101550:	3710      	adds	r7, #16
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}
 8101556:	bf00      	nop
 8101558:	40010000 	.word	0x40010000
 810155c:	40010400 	.word	0x40010400
 8101560:	40014000 	.word	0x40014000
 8101564:	40014400 	.word	0x40014400
 8101568:	40014800 	.word	0x40014800
 810156c:	40000400 	.word	0x40000400
 8101570:	40000800 	.word	0x40000800
 8101574:	40000c00 	.word	0x40000c00
 8101578:	40001800 	.word	0x40001800
 810157c:	00010007 	.word	0x00010007

08101580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8101580:	b580      	push	{r7, lr}
 8101582:	b086      	sub	sp, #24
 8101584:	af00      	add	r7, sp, #0
 8101586:	60f8      	str	r0, [r7, #12]
 8101588:	60b9      	str	r1, [r7, #8]
 810158a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810158c:	2300      	movs	r3, #0
 810158e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8101590:	68fb      	ldr	r3, [r7, #12]
 8101592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101596:	2b01      	cmp	r3, #1
 8101598:	d101      	bne.n	810159e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810159a:	2302      	movs	r3, #2
 810159c:	e0ff      	b.n	810179e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810159e:	68fb      	ldr	r3, [r7, #12]
 81015a0:	2201      	movs	r2, #1
 81015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	2b14      	cmp	r3, #20
 81015aa:	f200 80f0 	bhi.w	810178e <HAL_TIM_PWM_ConfigChannel+0x20e>
 81015ae:	a201      	add	r2, pc, #4	; (adr r2, 81015b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015b4:	08101609 	.word	0x08101609
 81015b8:	0810178f 	.word	0x0810178f
 81015bc:	0810178f 	.word	0x0810178f
 81015c0:	0810178f 	.word	0x0810178f
 81015c4:	08101649 	.word	0x08101649
 81015c8:	0810178f 	.word	0x0810178f
 81015cc:	0810178f 	.word	0x0810178f
 81015d0:	0810178f 	.word	0x0810178f
 81015d4:	0810168b 	.word	0x0810168b
 81015d8:	0810178f 	.word	0x0810178f
 81015dc:	0810178f 	.word	0x0810178f
 81015e0:	0810178f 	.word	0x0810178f
 81015e4:	081016cb 	.word	0x081016cb
 81015e8:	0810178f 	.word	0x0810178f
 81015ec:	0810178f 	.word	0x0810178f
 81015f0:	0810178f 	.word	0x0810178f
 81015f4:	0810170d 	.word	0x0810170d
 81015f8:	0810178f 	.word	0x0810178f
 81015fc:	0810178f 	.word	0x0810178f
 8101600:	0810178f 	.word	0x0810178f
 8101604:	0810174d 	.word	0x0810174d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8101608:	68fb      	ldr	r3, [r7, #12]
 810160a:	681b      	ldr	r3, [r3, #0]
 810160c:	68b9      	ldr	r1, [r7, #8]
 810160e:	4618      	mov	r0, r3
 8101610:	f000 f964 	bl	81018dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8101614:	68fb      	ldr	r3, [r7, #12]
 8101616:	681b      	ldr	r3, [r3, #0]
 8101618:	699a      	ldr	r2, [r3, #24]
 810161a:	68fb      	ldr	r3, [r7, #12]
 810161c:	681b      	ldr	r3, [r3, #0]
 810161e:	f042 0208 	orr.w	r2, r2, #8
 8101622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8101624:	68fb      	ldr	r3, [r7, #12]
 8101626:	681b      	ldr	r3, [r3, #0]
 8101628:	699a      	ldr	r2, [r3, #24]
 810162a:	68fb      	ldr	r3, [r7, #12]
 810162c:	681b      	ldr	r3, [r3, #0]
 810162e:	f022 0204 	bic.w	r2, r2, #4
 8101632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8101634:	68fb      	ldr	r3, [r7, #12]
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	6999      	ldr	r1, [r3, #24]
 810163a:	68bb      	ldr	r3, [r7, #8]
 810163c:	691a      	ldr	r2, [r3, #16]
 810163e:	68fb      	ldr	r3, [r7, #12]
 8101640:	681b      	ldr	r3, [r3, #0]
 8101642:	430a      	orrs	r2, r1
 8101644:	619a      	str	r2, [r3, #24]
      break;
 8101646:	e0a5      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8101648:	68fb      	ldr	r3, [r7, #12]
 810164a:	681b      	ldr	r3, [r3, #0]
 810164c:	68b9      	ldr	r1, [r7, #8]
 810164e:	4618      	mov	r0, r3
 8101650:	f000 f9d4 	bl	81019fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8101654:	68fb      	ldr	r3, [r7, #12]
 8101656:	681b      	ldr	r3, [r3, #0]
 8101658:	699a      	ldr	r2, [r3, #24]
 810165a:	68fb      	ldr	r3, [r7, #12]
 810165c:	681b      	ldr	r3, [r3, #0]
 810165e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8101664:	68fb      	ldr	r3, [r7, #12]
 8101666:	681b      	ldr	r3, [r3, #0]
 8101668:	699a      	ldr	r2, [r3, #24]
 810166a:	68fb      	ldr	r3, [r7, #12]
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8101672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8101674:	68fb      	ldr	r3, [r7, #12]
 8101676:	681b      	ldr	r3, [r3, #0]
 8101678:	6999      	ldr	r1, [r3, #24]
 810167a:	68bb      	ldr	r3, [r7, #8]
 810167c:	691b      	ldr	r3, [r3, #16]
 810167e:	021a      	lsls	r2, r3, #8
 8101680:	68fb      	ldr	r3, [r7, #12]
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	430a      	orrs	r2, r1
 8101686:	619a      	str	r2, [r3, #24]
      break;
 8101688:	e084      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810168a:	68fb      	ldr	r3, [r7, #12]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	68b9      	ldr	r1, [r7, #8]
 8101690:	4618      	mov	r0, r3
 8101692:	f000 fa3d 	bl	8101b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8101696:	68fb      	ldr	r3, [r7, #12]
 8101698:	681b      	ldr	r3, [r3, #0]
 810169a:	69da      	ldr	r2, [r3, #28]
 810169c:	68fb      	ldr	r3, [r7, #12]
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	f042 0208 	orr.w	r2, r2, #8
 81016a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81016a6:	68fb      	ldr	r3, [r7, #12]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	69da      	ldr	r2, [r3, #28]
 81016ac:	68fb      	ldr	r3, [r7, #12]
 81016ae:	681b      	ldr	r3, [r3, #0]
 81016b0:	f022 0204 	bic.w	r2, r2, #4
 81016b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81016b6:	68fb      	ldr	r3, [r7, #12]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	69d9      	ldr	r1, [r3, #28]
 81016bc:	68bb      	ldr	r3, [r7, #8]
 81016be:	691a      	ldr	r2, [r3, #16]
 81016c0:	68fb      	ldr	r3, [r7, #12]
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	430a      	orrs	r2, r1
 81016c6:	61da      	str	r2, [r3, #28]
      break;
 81016c8:	e064      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81016ca:	68fb      	ldr	r3, [r7, #12]
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	68b9      	ldr	r1, [r7, #8]
 81016d0:	4618      	mov	r0, r3
 81016d2:	f000 faa5 	bl	8101c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81016d6:	68fb      	ldr	r3, [r7, #12]
 81016d8:	681b      	ldr	r3, [r3, #0]
 81016da:	69da      	ldr	r2, [r3, #28]
 81016dc:	68fb      	ldr	r3, [r7, #12]
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81016e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81016e6:	68fb      	ldr	r3, [r7, #12]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	69da      	ldr	r2, [r3, #28]
 81016ec:	68fb      	ldr	r3, [r7, #12]
 81016ee:	681b      	ldr	r3, [r3, #0]
 81016f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81016f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81016f6:	68fb      	ldr	r3, [r7, #12]
 81016f8:	681b      	ldr	r3, [r3, #0]
 81016fa:	69d9      	ldr	r1, [r3, #28]
 81016fc:	68bb      	ldr	r3, [r7, #8]
 81016fe:	691b      	ldr	r3, [r3, #16]
 8101700:	021a      	lsls	r2, r3, #8
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	681b      	ldr	r3, [r3, #0]
 8101706:	430a      	orrs	r2, r1
 8101708:	61da      	str	r2, [r3, #28]
      break;
 810170a:	e043      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810170c:	68fb      	ldr	r3, [r7, #12]
 810170e:	681b      	ldr	r3, [r3, #0]
 8101710:	68b9      	ldr	r1, [r7, #8]
 8101712:	4618      	mov	r0, r3
 8101714:	f000 faee 	bl	8101cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8101718:	68fb      	ldr	r3, [r7, #12]
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810171e:	68fb      	ldr	r3, [r7, #12]
 8101720:	681b      	ldr	r3, [r3, #0]
 8101722:	f042 0208 	orr.w	r2, r2, #8
 8101726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8101728:	68fb      	ldr	r3, [r7, #12]
 810172a:	681b      	ldr	r3, [r3, #0]
 810172c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810172e:	68fb      	ldr	r3, [r7, #12]
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	f022 0204 	bic.w	r2, r2, #4
 8101736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8101738:	68fb      	ldr	r3, [r7, #12]
 810173a:	681b      	ldr	r3, [r3, #0]
 810173c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810173e:	68bb      	ldr	r3, [r7, #8]
 8101740:	691a      	ldr	r2, [r3, #16]
 8101742:	68fb      	ldr	r3, [r7, #12]
 8101744:	681b      	ldr	r3, [r3, #0]
 8101746:	430a      	orrs	r2, r1
 8101748:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810174a:	e023      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	68b9      	ldr	r1, [r7, #8]
 8101752:	4618      	mov	r0, r3
 8101754:	f000 fb32 	bl	8101dbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8101758:	68fb      	ldr	r3, [r7, #12]
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810175e:	68fb      	ldr	r3, [r7, #12]
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101766:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8101768:	68fb      	ldr	r3, [r7, #12]
 810176a:	681b      	ldr	r3, [r3, #0]
 810176c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810176e:	68fb      	ldr	r3, [r7, #12]
 8101770:	681b      	ldr	r3, [r3, #0]
 8101772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8101776:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8101778:	68fb      	ldr	r3, [r7, #12]
 810177a:	681b      	ldr	r3, [r3, #0]
 810177c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810177e:	68bb      	ldr	r3, [r7, #8]
 8101780:	691b      	ldr	r3, [r3, #16]
 8101782:	021a      	lsls	r2, r3, #8
 8101784:	68fb      	ldr	r3, [r7, #12]
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	430a      	orrs	r2, r1
 810178a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810178c:	e002      	b.n	8101794 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810178e:	2301      	movs	r3, #1
 8101790:	75fb      	strb	r3, [r7, #23]
      break;
 8101792:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8101794:	68fb      	ldr	r3, [r7, #12]
 8101796:	2200      	movs	r2, #0
 8101798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810179c:	7dfb      	ldrb	r3, [r7, #23]
}
 810179e:	4618      	mov	r0, r3
 81017a0:	3718      	adds	r7, #24
 81017a2:	46bd      	mov	sp, r7
 81017a4:	bd80      	pop	{r7, pc}
 81017a6:	bf00      	nop

081017a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81017a8:	b480      	push	{r7}
 81017aa:	b085      	sub	sp, #20
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
 81017b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	681b      	ldr	r3, [r3, #0]
 81017b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81017b8:	687b      	ldr	r3, [r7, #4]
 81017ba:	4a40      	ldr	r2, [pc, #256]	; (81018bc <TIM_Base_SetConfig+0x114>)
 81017bc:	4293      	cmp	r3, r2
 81017be:	d013      	beq.n	81017e8 <TIM_Base_SetConfig+0x40>
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81017c6:	d00f      	beq.n	81017e8 <TIM_Base_SetConfig+0x40>
 81017c8:	687b      	ldr	r3, [r7, #4]
 81017ca:	4a3d      	ldr	r2, [pc, #244]	; (81018c0 <TIM_Base_SetConfig+0x118>)
 81017cc:	4293      	cmp	r3, r2
 81017ce:	d00b      	beq.n	81017e8 <TIM_Base_SetConfig+0x40>
 81017d0:	687b      	ldr	r3, [r7, #4]
 81017d2:	4a3c      	ldr	r2, [pc, #240]	; (81018c4 <TIM_Base_SetConfig+0x11c>)
 81017d4:	4293      	cmp	r3, r2
 81017d6:	d007      	beq.n	81017e8 <TIM_Base_SetConfig+0x40>
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	4a3b      	ldr	r2, [pc, #236]	; (81018c8 <TIM_Base_SetConfig+0x120>)
 81017dc:	4293      	cmp	r3, r2
 81017de:	d003      	beq.n	81017e8 <TIM_Base_SetConfig+0x40>
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	4a3a      	ldr	r2, [pc, #232]	; (81018cc <TIM_Base_SetConfig+0x124>)
 81017e4:	4293      	cmp	r3, r2
 81017e6:	d108      	bne.n	81017fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81017e8:	68fb      	ldr	r3, [r7, #12]
 81017ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81017ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81017f0:	683b      	ldr	r3, [r7, #0]
 81017f2:	685b      	ldr	r3, [r3, #4]
 81017f4:	68fa      	ldr	r2, [r7, #12]
 81017f6:	4313      	orrs	r3, r2
 81017f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	4a2f      	ldr	r2, [pc, #188]	; (81018bc <TIM_Base_SetConfig+0x114>)
 81017fe:	4293      	cmp	r3, r2
 8101800:	d01f      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101808:	d01b      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	4a2c      	ldr	r2, [pc, #176]	; (81018c0 <TIM_Base_SetConfig+0x118>)
 810180e:	4293      	cmp	r3, r2
 8101810:	d017      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	4a2b      	ldr	r2, [pc, #172]	; (81018c4 <TIM_Base_SetConfig+0x11c>)
 8101816:	4293      	cmp	r3, r2
 8101818:	d013      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	4a2a      	ldr	r2, [pc, #168]	; (81018c8 <TIM_Base_SetConfig+0x120>)
 810181e:	4293      	cmp	r3, r2
 8101820:	d00f      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	4a29      	ldr	r2, [pc, #164]	; (81018cc <TIM_Base_SetConfig+0x124>)
 8101826:	4293      	cmp	r3, r2
 8101828:	d00b      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	4a28      	ldr	r2, [pc, #160]	; (81018d0 <TIM_Base_SetConfig+0x128>)
 810182e:	4293      	cmp	r3, r2
 8101830:	d007      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	4a27      	ldr	r2, [pc, #156]	; (81018d4 <TIM_Base_SetConfig+0x12c>)
 8101836:	4293      	cmp	r3, r2
 8101838:	d003      	beq.n	8101842 <TIM_Base_SetConfig+0x9a>
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	4a26      	ldr	r2, [pc, #152]	; (81018d8 <TIM_Base_SetConfig+0x130>)
 810183e:	4293      	cmp	r3, r2
 8101840:	d108      	bne.n	8101854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101842:	68fb      	ldr	r3, [r7, #12]
 8101844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810184a:	683b      	ldr	r3, [r7, #0]
 810184c:	68db      	ldr	r3, [r3, #12]
 810184e:	68fa      	ldr	r2, [r7, #12]
 8101850:	4313      	orrs	r3, r2
 8101852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101854:	68fb      	ldr	r3, [r7, #12]
 8101856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810185a:	683b      	ldr	r3, [r7, #0]
 810185c:	695b      	ldr	r3, [r3, #20]
 810185e:	4313      	orrs	r3, r2
 8101860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	68fa      	ldr	r2, [r7, #12]
 8101866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101868:	683b      	ldr	r3, [r7, #0]
 810186a:	689a      	ldr	r2, [r3, #8]
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101870:	683b      	ldr	r3, [r7, #0]
 8101872:	681a      	ldr	r2, [r3, #0]
 8101874:	687b      	ldr	r3, [r7, #4]
 8101876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	4a10      	ldr	r2, [pc, #64]	; (81018bc <TIM_Base_SetConfig+0x114>)
 810187c:	4293      	cmp	r3, r2
 810187e:	d00f      	beq.n	81018a0 <TIM_Base_SetConfig+0xf8>
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	4a12      	ldr	r2, [pc, #72]	; (81018cc <TIM_Base_SetConfig+0x124>)
 8101884:	4293      	cmp	r3, r2
 8101886:	d00b      	beq.n	81018a0 <TIM_Base_SetConfig+0xf8>
 8101888:	687b      	ldr	r3, [r7, #4]
 810188a:	4a11      	ldr	r2, [pc, #68]	; (81018d0 <TIM_Base_SetConfig+0x128>)
 810188c:	4293      	cmp	r3, r2
 810188e:	d007      	beq.n	81018a0 <TIM_Base_SetConfig+0xf8>
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	4a10      	ldr	r2, [pc, #64]	; (81018d4 <TIM_Base_SetConfig+0x12c>)
 8101894:	4293      	cmp	r3, r2
 8101896:	d003      	beq.n	81018a0 <TIM_Base_SetConfig+0xf8>
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	4a0f      	ldr	r2, [pc, #60]	; (81018d8 <TIM_Base_SetConfig+0x130>)
 810189c:	4293      	cmp	r3, r2
 810189e:	d103      	bne.n	81018a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81018a0:	683b      	ldr	r3, [r7, #0]
 81018a2:	691a      	ldr	r2, [r3, #16]
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81018a8:	687b      	ldr	r3, [r7, #4]
 81018aa:	2201      	movs	r2, #1
 81018ac:	615a      	str	r2, [r3, #20]
}
 81018ae:	bf00      	nop
 81018b0:	3714      	adds	r7, #20
 81018b2:	46bd      	mov	sp, r7
 81018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b8:	4770      	bx	lr
 81018ba:	bf00      	nop
 81018bc:	40010000 	.word	0x40010000
 81018c0:	40000400 	.word	0x40000400
 81018c4:	40000800 	.word	0x40000800
 81018c8:	40000c00 	.word	0x40000c00
 81018cc:	40010400 	.word	0x40010400
 81018d0:	40014000 	.word	0x40014000
 81018d4:	40014400 	.word	0x40014400
 81018d8:	40014800 	.word	0x40014800

081018dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81018dc:	b480      	push	{r7}
 81018de:	b087      	sub	sp, #28
 81018e0:	af00      	add	r7, sp, #0
 81018e2:	6078      	str	r0, [r7, #4]
 81018e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	6a1b      	ldr	r3, [r3, #32]
 81018ea:	f023 0201 	bic.w	r2, r3, #1
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	6a1b      	ldr	r3, [r3, #32]
 81018f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	685b      	ldr	r3, [r3, #4]
 81018fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	699b      	ldr	r3, [r3, #24]
 8101902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8101904:	68fb      	ldr	r3, [r7, #12]
 8101906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810190e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8101910:	68fb      	ldr	r3, [r7, #12]
 8101912:	f023 0303 	bic.w	r3, r3, #3
 8101916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8101918:	683b      	ldr	r3, [r7, #0]
 810191a:	681b      	ldr	r3, [r3, #0]
 810191c:	68fa      	ldr	r2, [r7, #12]
 810191e:	4313      	orrs	r3, r2
 8101920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8101922:	697b      	ldr	r3, [r7, #20]
 8101924:	f023 0302 	bic.w	r3, r3, #2
 8101928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810192a:	683b      	ldr	r3, [r7, #0]
 810192c:	689b      	ldr	r3, [r3, #8]
 810192e:	697a      	ldr	r2, [r7, #20]
 8101930:	4313      	orrs	r3, r2
 8101932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	4a2c      	ldr	r2, [pc, #176]	; (81019e8 <TIM_OC1_SetConfig+0x10c>)
 8101938:	4293      	cmp	r3, r2
 810193a:	d00f      	beq.n	810195c <TIM_OC1_SetConfig+0x80>
 810193c:	687b      	ldr	r3, [r7, #4]
 810193e:	4a2b      	ldr	r2, [pc, #172]	; (81019ec <TIM_OC1_SetConfig+0x110>)
 8101940:	4293      	cmp	r3, r2
 8101942:	d00b      	beq.n	810195c <TIM_OC1_SetConfig+0x80>
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	4a2a      	ldr	r2, [pc, #168]	; (81019f0 <TIM_OC1_SetConfig+0x114>)
 8101948:	4293      	cmp	r3, r2
 810194a:	d007      	beq.n	810195c <TIM_OC1_SetConfig+0x80>
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	4a29      	ldr	r2, [pc, #164]	; (81019f4 <TIM_OC1_SetConfig+0x118>)
 8101950:	4293      	cmp	r3, r2
 8101952:	d003      	beq.n	810195c <TIM_OC1_SetConfig+0x80>
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	4a28      	ldr	r2, [pc, #160]	; (81019f8 <TIM_OC1_SetConfig+0x11c>)
 8101958:	4293      	cmp	r3, r2
 810195a:	d10c      	bne.n	8101976 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810195c:	697b      	ldr	r3, [r7, #20]
 810195e:	f023 0308 	bic.w	r3, r3, #8
 8101962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8101964:	683b      	ldr	r3, [r7, #0]
 8101966:	68db      	ldr	r3, [r3, #12]
 8101968:	697a      	ldr	r2, [r7, #20]
 810196a:	4313      	orrs	r3, r2
 810196c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810196e:	697b      	ldr	r3, [r7, #20]
 8101970:	f023 0304 	bic.w	r3, r3, #4
 8101974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	4a1b      	ldr	r2, [pc, #108]	; (81019e8 <TIM_OC1_SetConfig+0x10c>)
 810197a:	4293      	cmp	r3, r2
 810197c:	d00f      	beq.n	810199e <TIM_OC1_SetConfig+0xc2>
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	4a1a      	ldr	r2, [pc, #104]	; (81019ec <TIM_OC1_SetConfig+0x110>)
 8101982:	4293      	cmp	r3, r2
 8101984:	d00b      	beq.n	810199e <TIM_OC1_SetConfig+0xc2>
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	4a19      	ldr	r2, [pc, #100]	; (81019f0 <TIM_OC1_SetConfig+0x114>)
 810198a:	4293      	cmp	r3, r2
 810198c:	d007      	beq.n	810199e <TIM_OC1_SetConfig+0xc2>
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	4a18      	ldr	r2, [pc, #96]	; (81019f4 <TIM_OC1_SetConfig+0x118>)
 8101992:	4293      	cmp	r3, r2
 8101994:	d003      	beq.n	810199e <TIM_OC1_SetConfig+0xc2>
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	4a17      	ldr	r2, [pc, #92]	; (81019f8 <TIM_OC1_SetConfig+0x11c>)
 810199a:	4293      	cmp	r3, r2
 810199c:	d111      	bne.n	81019c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810199e:	693b      	ldr	r3, [r7, #16]
 81019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81019a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81019a6:	693b      	ldr	r3, [r7, #16]
 81019a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81019ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81019ae:	683b      	ldr	r3, [r7, #0]
 81019b0:	695b      	ldr	r3, [r3, #20]
 81019b2:	693a      	ldr	r2, [r7, #16]
 81019b4:	4313      	orrs	r3, r2
 81019b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81019b8:	683b      	ldr	r3, [r7, #0]
 81019ba:	699b      	ldr	r3, [r3, #24]
 81019bc:	693a      	ldr	r2, [r7, #16]
 81019be:	4313      	orrs	r3, r2
 81019c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	693a      	ldr	r2, [r7, #16]
 81019c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	68fa      	ldr	r2, [r7, #12]
 81019cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81019ce:	683b      	ldr	r3, [r7, #0]
 81019d0:	685a      	ldr	r2, [r3, #4]
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	697a      	ldr	r2, [r7, #20]
 81019da:	621a      	str	r2, [r3, #32]
}
 81019dc:	bf00      	nop
 81019de:	371c      	adds	r7, #28
 81019e0:	46bd      	mov	sp, r7
 81019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e6:	4770      	bx	lr
 81019e8:	40010000 	.word	0x40010000
 81019ec:	40010400 	.word	0x40010400
 81019f0:	40014000 	.word	0x40014000
 81019f4:	40014400 	.word	0x40014400
 81019f8:	40014800 	.word	0x40014800

081019fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81019fc:	b480      	push	{r7}
 81019fe:	b087      	sub	sp, #28
 8101a00:	af00      	add	r7, sp, #0
 8101a02:	6078      	str	r0, [r7, #4]
 8101a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	6a1b      	ldr	r3, [r3, #32]
 8101a0a:	f023 0210 	bic.w	r2, r3, #16
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	6a1b      	ldr	r3, [r3, #32]
 8101a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	685b      	ldr	r3, [r3, #4]
 8101a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	699b      	ldr	r3, [r3, #24]
 8101a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8101a24:	68fb      	ldr	r3, [r7, #12]
 8101a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8101a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8101a30:	68fb      	ldr	r3, [r7, #12]
 8101a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8101a38:	683b      	ldr	r3, [r7, #0]
 8101a3a:	681b      	ldr	r3, [r3, #0]
 8101a3c:	021b      	lsls	r3, r3, #8
 8101a3e:	68fa      	ldr	r2, [r7, #12]
 8101a40:	4313      	orrs	r3, r2
 8101a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8101a44:	697b      	ldr	r3, [r7, #20]
 8101a46:	f023 0320 	bic.w	r3, r3, #32
 8101a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8101a4c:	683b      	ldr	r3, [r7, #0]
 8101a4e:	689b      	ldr	r3, [r3, #8]
 8101a50:	011b      	lsls	r3, r3, #4
 8101a52:	697a      	ldr	r2, [r7, #20]
 8101a54:	4313      	orrs	r3, r2
 8101a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	4a28      	ldr	r2, [pc, #160]	; (8101afc <TIM_OC2_SetConfig+0x100>)
 8101a5c:	4293      	cmp	r3, r2
 8101a5e:	d003      	beq.n	8101a68 <TIM_OC2_SetConfig+0x6c>
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	4a27      	ldr	r2, [pc, #156]	; (8101b00 <TIM_OC2_SetConfig+0x104>)
 8101a64:	4293      	cmp	r3, r2
 8101a66:	d10d      	bne.n	8101a84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8101a68:	697b      	ldr	r3, [r7, #20]
 8101a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8101a70:	683b      	ldr	r3, [r7, #0]
 8101a72:	68db      	ldr	r3, [r3, #12]
 8101a74:	011b      	lsls	r3, r3, #4
 8101a76:	697a      	ldr	r2, [r7, #20]
 8101a78:	4313      	orrs	r3, r2
 8101a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8101a7c:	697b      	ldr	r3, [r7, #20]
 8101a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8101a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	4a1d      	ldr	r2, [pc, #116]	; (8101afc <TIM_OC2_SetConfig+0x100>)
 8101a88:	4293      	cmp	r3, r2
 8101a8a:	d00f      	beq.n	8101aac <TIM_OC2_SetConfig+0xb0>
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	4a1c      	ldr	r2, [pc, #112]	; (8101b00 <TIM_OC2_SetConfig+0x104>)
 8101a90:	4293      	cmp	r3, r2
 8101a92:	d00b      	beq.n	8101aac <TIM_OC2_SetConfig+0xb0>
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	4a1b      	ldr	r2, [pc, #108]	; (8101b04 <TIM_OC2_SetConfig+0x108>)
 8101a98:	4293      	cmp	r3, r2
 8101a9a:	d007      	beq.n	8101aac <TIM_OC2_SetConfig+0xb0>
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	4a1a      	ldr	r2, [pc, #104]	; (8101b08 <TIM_OC2_SetConfig+0x10c>)
 8101aa0:	4293      	cmp	r3, r2
 8101aa2:	d003      	beq.n	8101aac <TIM_OC2_SetConfig+0xb0>
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	4a19      	ldr	r2, [pc, #100]	; (8101b0c <TIM_OC2_SetConfig+0x110>)
 8101aa8:	4293      	cmp	r3, r2
 8101aaa:	d113      	bne.n	8101ad4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8101aac:	693b      	ldr	r3, [r7, #16]
 8101aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8101ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8101ab4:	693b      	ldr	r3, [r7, #16]
 8101ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8101aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8101abc:	683b      	ldr	r3, [r7, #0]
 8101abe:	695b      	ldr	r3, [r3, #20]
 8101ac0:	009b      	lsls	r3, r3, #2
 8101ac2:	693a      	ldr	r2, [r7, #16]
 8101ac4:	4313      	orrs	r3, r2
 8101ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8101ac8:	683b      	ldr	r3, [r7, #0]
 8101aca:	699b      	ldr	r3, [r3, #24]
 8101acc:	009b      	lsls	r3, r3, #2
 8101ace:	693a      	ldr	r2, [r7, #16]
 8101ad0:	4313      	orrs	r3, r2
 8101ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	693a      	ldr	r2, [r7, #16]
 8101ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	68fa      	ldr	r2, [r7, #12]
 8101ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8101ae0:	683b      	ldr	r3, [r7, #0]
 8101ae2:	685a      	ldr	r2, [r3, #4]
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	697a      	ldr	r2, [r7, #20]
 8101aec:	621a      	str	r2, [r3, #32]
}
 8101aee:	bf00      	nop
 8101af0:	371c      	adds	r7, #28
 8101af2:	46bd      	mov	sp, r7
 8101af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af8:	4770      	bx	lr
 8101afa:	bf00      	nop
 8101afc:	40010000 	.word	0x40010000
 8101b00:	40010400 	.word	0x40010400
 8101b04:	40014000 	.word	0x40014000
 8101b08:	40014400 	.word	0x40014400
 8101b0c:	40014800 	.word	0x40014800

08101b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8101b10:	b480      	push	{r7}
 8101b12:	b087      	sub	sp, #28
 8101b14:	af00      	add	r7, sp, #0
 8101b16:	6078      	str	r0, [r7, #4]
 8101b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	6a1b      	ldr	r3, [r3, #32]
 8101b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	6a1b      	ldr	r3, [r3, #32]
 8101b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	685b      	ldr	r3, [r3, #4]
 8101b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	69db      	ldr	r3, [r3, #28]
 8101b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8101b38:	68fb      	ldr	r3, [r7, #12]
 8101b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8101b44:	68fb      	ldr	r3, [r7, #12]
 8101b46:	f023 0303 	bic.w	r3, r3, #3
 8101b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8101b4c:	683b      	ldr	r3, [r7, #0]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	68fa      	ldr	r2, [r7, #12]
 8101b52:	4313      	orrs	r3, r2
 8101b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8101b56:	697b      	ldr	r3, [r7, #20]
 8101b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8101b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8101b5e:	683b      	ldr	r3, [r7, #0]
 8101b60:	689b      	ldr	r3, [r3, #8]
 8101b62:	021b      	lsls	r3, r3, #8
 8101b64:	697a      	ldr	r2, [r7, #20]
 8101b66:	4313      	orrs	r3, r2
 8101b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	4a27      	ldr	r2, [pc, #156]	; (8101c0c <TIM_OC3_SetConfig+0xfc>)
 8101b6e:	4293      	cmp	r3, r2
 8101b70:	d003      	beq.n	8101b7a <TIM_OC3_SetConfig+0x6a>
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	4a26      	ldr	r2, [pc, #152]	; (8101c10 <TIM_OC3_SetConfig+0x100>)
 8101b76:	4293      	cmp	r3, r2
 8101b78:	d10d      	bne.n	8101b96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8101b7a:	697b      	ldr	r3, [r7, #20]
 8101b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8101b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8101b82:	683b      	ldr	r3, [r7, #0]
 8101b84:	68db      	ldr	r3, [r3, #12]
 8101b86:	021b      	lsls	r3, r3, #8
 8101b88:	697a      	ldr	r2, [r7, #20]
 8101b8a:	4313      	orrs	r3, r2
 8101b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8101b8e:	697b      	ldr	r3, [r7, #20]
 8101b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8101b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	4a1c      	ldr	r2, [pc, #112]	; (8101c0c <TIM_OC3_SetConfig+0xfc>)
 8101b9a:	4293      	cmp	r3, r2
 8101b9c:	d00f      	beq.n	8101bbe <TIM_OC3_SetConfig+0xae>
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	4a1b      	ldr	r2, [pc, #108]	; (8101c10 <TIM_OC3_SetConfig+0x100>)
 8101ba2:	4293      	cmp	r3, r2
 8101ba4:	d00b      	beq.n	8101bbe <TIM_OC3_SetConfig+0xae>
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	4a1a      	ldr	r2, [pc, #104]	; (8101c14 <TIM_OC3_SetConfig+0x104>)
 8101baa:	4293      	cmp	r3, r2
 8101bac:	d007      	beq.n	8101bbe <TIM_OC3_SetConfig+0xae>
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	4a19      	ldr	r2, [pc, #100]	; (8101c18 <TIM_OC3_SetConfig+0x108>)
 8101bb2:	4293      	cmp	r3, r2
 8101bb4:	d003      	beq.n	8101bbe <TIM_OC3_SetConfig+0xae>
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	4a18      	ldr	r2, [pc, #96]	; (8101c1c <TIM_OC3_SetConfig+0x10c>)
 8101bba:	4293      	cmp	r3, r2
 8101bbc:	d113      	bne.n	8101be6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8101bbe:	693b      	ldr	r3, [r7, #16]
 8101bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8101bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8101bc6:	693b      	ldr	r3, [r7, #16]
 8101bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8101bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8101bce:	683b      	ldr	r3, [r7, #0]
 8101bd0:	695b      	ldr	r3, [r3, #20]
 8101bd2:	011b      	lsls	r3, r3, #4
 8101bd4:	693a      	ldr	r2, [r7, #16]
 8101bd6:	4313      	orrs	r3, r2
 8101bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8101bda:	683b      	ldr	r3, [r7, #0]
 8101bdc:	699b      	ldr	r3, [r3, #24]
 8101bde:	011b      	lsls	r3, r3, #4
 8101be0:	693a      	ldr	r2, [r7, #16]
 8101be2:	4313      	orrs	r3, r2
 8101be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	693a      	ldr	r2, [r7, #16]
 8101bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	68fa      	ldr	r2, [r7, #12]
 8101bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8101bf2:	683b      	ldr	r3, [r7, #0]
 8101bf4:	685a      	ldr	r2, [r3, #4]
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	697a      	ldr	r2, [r7, #20]
 8101bfe:	621a      	str	r2, [r3, #32]
}
 8101c00:	bf00      	nop
 8101c02:	371c      	adds	r7, #28
 8101c04:	46bd      	mov	sp, r7
 8101c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c0a:	4770      	bx	lr
 8101c0c:	40010000 	.word	0x40010000
 8101c10:	40010400 	.word	0x40010400
 8101c14:	40014000 	.word	0x40014000
 8101c18:	40014400 	.word	0x40014400
 8101c1c:	40014800 	.word	0x40014800

08101c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8101c20:	b480      	push	{r7}
 8101c22:	b087      	sub	sp, #28
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	6078      	str	r0, [r7, #4]
 8101c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	6a1b      	ldr	r3, [r3, #32]
 8101c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	6a1b      	ldr	r3, [r3, #32]
 8101c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	685b      	ldr	r3, [r3, #4]
 8101c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	69db      	ldr	r3, [r3, #28]
 8101c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8101c48:	68fb      	ldr	r3, [r7, #12]
 8101c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8101c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8101c54:	68fb      	ldr	r3, [r7, #12]
 8101c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8101c5c:	683b      	ldr	r3, [r7, #0]
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	021b      	lsls	r3, r3, #8
 8101c62:	68fa      	ldr	r2, [r7, #12]
 8101c64:	4313      	orrs	r3, r2
 8101c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8101c68:	693b      	ldr	r3, [r7, #16]
 8101c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8101c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8101c70:	683b      	ldr	r3, [r7, #0]
 8101c72:	689b      	ldr	r3, [r3, #8]
 8101c74:	031b      	lsls	r3, r3, #12
 8101c76:	693a      	ldr	r2, [r7, #16]
 8101c78:	4313      	orrs	r3, r2
 8101c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	4a18      	ldr	r2, [pc, #96]	; (8101ce0 <TIM_OC4_SetConfig+0xc0>)
 8101c80:	4293      	cmp	r3, r2
 8101c82:	d00f      	beq.n	8101ca4 <TIM_OC4_SetConfig+0x84>
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	4a17      	ldr	r2, [pc, #92]	; (8101ce4 <TIM_OC4_SetConfig+0xc4>)
 8101c88:	4293      	cmp	r3, r2
 8101c8a:	d00b      	beq.n	8101ca4 <TIM_OC4_SetConfig+0x84>
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	4a16      	ldr	r2, [pc, #88]	; (8101ce8 <TIM_OC4_SetConfig+0xc8>)
 8101c90:	4293      	cmp	r3, r2
 8101c92:	d007      	beq.n	8101ca4 <TIM_OC4_SetConfig+0x84>
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	4a15      	ldr	r2, [pc, #84]	; (8101cec <TIM_OC4_SetConfig+0xcc>)
 8101c98:	4293      	cmp	r3, r2
 8101c9a:	d003      	beq.n	8101ca4 <TIM_OC4_SetConfig+0x84>
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	4a14      	ldr	r2, [pc, #80]	; (8101cf0 <TIM_OC4_SetConfig+0xd0>)
 8101ca0:	4293      	cmp	r3, r2
 8101ca2:	d109      	bne.n	8101cb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8101ca4:	697b      	ldr	r3, [r7, #20]
 8101ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8101cac:	683b      	ldr	r3, [r7, #0]
 8101cae:	695b      	ldr	r3, [r3, #20]
 8101cb0:	019b      	lsls	r3, r3, #6
 8101cb2:	697a      	ldr	r2, [r7, #20]
 8101cb4:	4313      	orrs	r3, r2
 8101cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	697a      	ldr	r2, [r7, #20]
 8101cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	68fa      	ldr	r2, [r7, #12]
 8101cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8101cc4:	683b      	ldr	r3, [r7, #0]
 8101cc6:	685a      	ldr	r2, [r3, #4]
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	693a      	ldr	r2, [r7, #16]
 8101cd0:	621a      	str	r2, [r3, #32]
}
 8101cd2:	bf00      	nop
 8101cd4:	371c      	adds	r7, #28
 8101cd6:	46bd      	mov	sp, r7
 8101cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cdc:	4770      	bx	lr
 8101cde:	bf00      	nop
 8101ce0:	40010000 	.word	0x40010000
 8101ce4:	40010400 	.word	0x40010400
 8101ce8:	40014000 	.word	0x40014000
 8101cec:	40014400 	.word	0x40014400
 8101cf0:	40014800 	.word	0x40014800

08101cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8101cf4:	b480      	push	{r7}
 8101cf6:	b087      	sub	sp, #28
 8101cf8:	af00      	add	r7, sp, #0
 8101cfa:	6078      	str	r0, [r7, #4]
 8101cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	6a1b      	ldr	r3, [r3, #32]
 8101d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	6a1b      	ldr	r3, [r3, #32]
 8101d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	685b      	ldr	r3, [r3, #4]
 8101d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8101d1c:	68fb      	ldr	r3, [r7, #12]
 8101d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8101d28:	683b      	ldr	r3, [r7, #0]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	68fa      	ldr	r2, [r7, #12]
 8101d2e:	4313      	orrs	r3, r2
 8101d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8101d32:	693b      	ldr	r3, [r7, #16]
 8101d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8101d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8101d3a:	683b      	ldr	r3, [r7, #0]
 8101d3c:	689b      	ldr	r3, [r3, #8]
 8101d3e:	041b      	lsls	r3, r3, #16
 8101d40:	693a      	ldr	r2, [r7, #16]
 8101d42:	4313      	orrs	r3, r2
 8101d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	4a17      	ldr	r2, [pc, #92]	; (8101da8 <TIM_OC5_SetConfig+0xb4>)
 8101d4a:	4293      	cmp	r3, r2
 8101d4c:	d00f      	beq.n	8101d6e <TIM_OC5_SetConfig+0x7a>
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	4a16      	ldr	r2, [pc, #88]	; (8101dac <TIM_OC5_SetConfig+0xb8>)
 8101d52:	4293      	cmp	r3, r2
 8101d54:	d00b      	beq.n	8101d6e <TIM_OC5_SetConfig+0x7a>
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	4a15      	ldr	r2, [pc, #84]	; (8101db0 <TIM_OC5_SetConfig+0xbc>)
 8101d5a:	4293      	cmp	r3, r2
 8101d5c:	d007      	beq.n	8101d6e <TIM_OC5_SetConfig+0x7a>
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	4a14      	ldr	r2, [pc, #80]	; (8101db4 <TIM_OC5_SetConfig+0xc0>)
 8101d62:	4293      	cmp	r3, r2
 8101d64:	d003      	beq.n	8101d6e <TIM_OC5_SetConfig+0x7a>
 8101d66:	687b      	ldr	r3, [r7, #4]
 8101d68:	4a13      	ldr	r2, [pc, #76]	; (8101db8 <TIM_OC5_SetConfig+0xc4>)
 8101d6a:	4293      	cmp	r3, r2
 8101d6c:	d109      	bne.n	8101d82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8101d6e:	697b      	ldr	r3, [r7, #20]
 8101d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8101d76:	683b      	ldr	r3, [r7, #0]
 8101d78:	695b      	ldr	r3, [r3, #20]
 8101d7a:	021b      	lsls	r3, r3, #8
 8101d7c:	697a      	ldr	r2, [r7, #20]
 8101d7e:	4313      	orrs	r3, r2
 8101d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	697a      	ldr	r2, [r7, #20]
 8101d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	68fa      	ldr	r2, [r7, #12]
 8101d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8101d8e:	683b      	ldr	r3, [r7, #0]
 8101d90:	685a      	ldr	r2, [r3, #4]
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	693a      	ldr	r2, [r7, #16]
 8101d9a:	621a      	str	r2, [r3, #32]
}
 8101d9c:	bf00      	nop
 8101d9e:	371c      	adds	r7, #28
 8101da0:	46bd      	mov	sp, r7
 8101da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101da6:	4770      	bx	lr
 8101da8:	40010000 	.word	0x40010000
 8101dac:	40010400 	.word	0x40010400
 8101db0:	40014000 	.word	0x40014000
 8101db4:	40014400 	.word	0x40014400
 8101db8:	40014800 	.word	0x40014800

08101dbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8101dbc:	b480      	push	{r7}
 8101dbe:	b087      	sub	sp, #28
 8101dc0:	af00      	add	r7, sp, #0
 8101dc2:	6078      	str	r0, [r7, #4]
 8101dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	6a1b      	ldr	r3, [r3, #32]
 8101dca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	6a1b      	ldr	r3, [r3, #32]
 8101dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	685b      	ldr	r3, [r3, #4]
 8101ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8101de4:	68fb      	ldr	r3, [r7, #12]
 8101de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8101dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8101df0:	683b      	ldr	r3, [r7, #0]
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	021b      	lsls	r3, r3, #8
 8101df6:	68fa      	ldr	r2, [r7, #12]
 8101df8:	4313      	orrs	r3, r2
 8101dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8101dfc:	693b      	ldr	r3, [r7, #16]
 8101dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8101e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8101e04:	683b      	ldr	r3, [r7, #0]
 8101e06:	689b      	ldr	r3, [r3, #8]
 8101e08:	051b      	lsls	r3, r3, #20
 8101e0a:	693a      	ldr	r2, [r7, #16]
 8101e0c:	4313      	orrs	r3, r2
 8101e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	4a18      	ldr	r2, [pc, #96]	; (8101e74 <TIM_OC6_SetConfig+0xb8>)
 8101e14:	4293      	cmp	r3, r2
 8101e16:	d00f      	beq.n	8101e38 <TIM_OC6_SetConfig+0x7c>
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	4a17      	ldr	r2, [pc, #92]	; (8101e78 <TIM_OC6_SetConfig+0xbc>)
 8101e1c:	4293      	cmp	r3, r2
 8101e1e:	d00b      	beq.n	8101e38 <TIM_OC6_SetConfig+0x7c>
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	4a16      	ldr	r2, [pc, #88]	; (8101e7c <TIM_OC6_SetConfig+0xc0>)
 8101e24:	4293      	cmp	r3, r2
 8101e26:	d007      	beq.n	8101e38 <TIM_OC6_SetConfig+0x7c>
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	4a15      	ldr	r2, [pc, #84]	; (8101e80 <TIM_OC6_SetConfig+0xc4>)
 8101e2c:	4293      	cmp	r3, r2
 8101e2e:	d003      	beq.n	8101e38 <TIM_OC6_SetConfig+0x7c>
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	4a14      	ldr	r2, [pc, #80]	; (8101e84 <TIM_OC6_SetConfig+0xc8>)
 8101e34:	4293      	cmp	r3, r2
 8101e36:	d109      	bne.n	8101e4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8101e38:	697b      	ldr	r3, [r7, #20]
 8101e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8101e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8101e40:	683b      	ldr	r3, [r7, #0]
 8101e42:	695b      	ldr	r3, [r3, #20]
 8101e44:	029b      	lsls	r3, r3, #10
 8101e46:	697a      	ldr	r2, [r7, #20]
 8101e48:	4313      	orrs	r3, r2
 8101e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	697a      	ldr	r2, [r7, #20]
 8101e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	68fa      	ldr	r2, [r7, #12]
 8101e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8101e58:	683b      	ldr	r3, [r7, #0]
 8101e5a:	685a      	ldr	r2, [r3, #4]
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	693a      	ldr	r2, [r7, #16]
 8101e64:	621a      	str	r2, [r3, #32]
}
 8101e66:	bf00      	nop
 8101e68:	371c      	adds	r7, #28
 8101e6a:	46bd      	mov	sp, r7
 8101e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e70:	4770      	bx	lr
 8101e72:	bf00      	nop
 8101e74:	40010000 	.word	0x40010000
 8101e78:	40010400 	.word	0x40010400
 8101e7c:	40014000 	.word	0x40014000
 8101e80:	40014400 	.word	0x40014400
 8101e84:	40014800 	.word	0x40014800

08101e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8101e88:	b480      	push	{r7}
 8101e8a:	b087      	sub	sp, #28
 8101e8c:	af00      	add	r7, sp, #0
 8101e8e:	60f8      	str	r0, [r7, #12]
 8101e90:	60b9      	str	r1, [r7, #8]
 8101e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8101e94:	68bb      	ldr	r3, [r7, #8]
 8101e96:	f003 031f 	and.w	r3, r3, #31
 8101e9a:	2201      	movs	r2, #1
 8101e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8101ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8101ea2:	68fb      	ldr	r3, [r7, #12]
 8101ea4:	6a1a      	ldr	r2, [r3, #32]
 8101ea6:	697b      	ldr	r3, [r7, #20]
 8101ea8:	43db      	mvns	r3, r3
 8101eaa:	401a      	ands	r2, r3
 8101eac:	68fb      	ldr	r3, [r7, #12]
 8101eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8101eb0:	68fb      	ldr	r3, [r7, #12]
 8101eb2:	6a1a      	ldr	r2, [r3, #32]
 8101eb4:	68bb      	ldr	r3, [r7, #8]
 8101eb6:	f003 031f 	and.w	r3, r3, #31
 8101eba:	6879      	ldr	r1, [r7, #4]
 8101ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8101ec0:	431a      	orrs	r2, r3
 8101ec2:	68fb      	ldr	r3, [r7, #12]
 8101ec4:	621a      	str	r2, [r3, #32]
}
 8101ec6:	bf00      	nop
 8101ec8:	371c      	adds	r7, #28
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ed0:	4770      	bx	lr
	...

08101ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8101ed4:	b480      	push	{r7}
 8101ed6:	b085      	sub	sp, #20
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	6078      	str	r0, [r7, #4]
 8101edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101ee4:	2b01      	cmp	r3, #1
 8101ee6:	d101      	bne.n	8101eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8101ee8:	2302      	movs	r3, #2
 8101eea:	e06d      	b.n	8101fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	2201      	movs	r2, #1
 8101ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	2202      	movs	r2, #2
 8101ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8101efc:	687b      	ldr	r3, [r7, #4]
 8101efe:	681b      	ldr	r3, [r3, #0]
 8101f00:	685b      	ldr	r3, [r3, #4]
 8101f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	689b      	ldr	r3, [r3, #8]
 8101f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	4a30      	ldr	r2, [pc, #192]	; (8101fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8101f12:	4293      	cmp	r3, r2
 8101f14:	d004      	beq.n	8101f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	4a2f      	ldr	r2, [pc, #188]	; (8101fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8101f1c:	4293      	cmp	r3, r2
 8101f1e:	d108      	bne.n	8101f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8101f20:	68fb      	ldr	r3, [r7, #12]
 8101f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8101f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8101f28:	683b      	ldr	r3, [r7, #0]
 8101f2a:	685b      	ldr	r3, [r3, #4]
 8101f2c:	68fa      	ldr	r2, [r7, #12]
 8101f2e:	4313      	orrs	r3, r2
 8101f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8101f3a:	683b      	ldr	r3, [r7, #0]
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	68fa      	ldr	r2, [r7, #12]
 8101f40:	4313      	orrs	r3, r2
 8101f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	681b      	ldr	r3, [r3, #0]
 8101f48:	68fa      	ldr	r2, [r7, #12]
 8101f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	4a20      	ldr	r2, [pc, #128]	; (8101fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8101f52:	4293      	cmp	r3, r2
 8101f54:	d022      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	681b      	ldr	r3, [r3, #0]
 8101f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f5e:	d01d      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	4a1d      	ldr	r2, [pc, #116]	; (8101fdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8101f66:	4293      	cmp	r3, r2
 8101f68:	d018      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	4a1c      	ldr	r2, [pc, #112]	; (8101fe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8101f70:	4293      	cmp	r3, r2
 8101f72:	d013      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	4a1a      	ldr	r2, [pc, #104]	; (8101fe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8101f7a:	4293      	cmp	r3, r2
 8101f7c:	d00e      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	681b      	ldr	r3, [r3, #0]
 8101f82:	4a15      	ldr	r2, [pc, #84]	; (8101fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8101f84:	4293      	cmp	r3, r2
 8101f86:	d009      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	4a16      	ldr	r2, [pc, #88]	; (8101fe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8101f8e:	4293      	cmp	r3, r2
 8101f90:	d004      	beq.n	8101f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	4a15      	ldr	r2, [pc, #84]	; (8101fec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8101f98:	4293      	cmp	r3, r2
 8101f9a:	d10c      	bne.n	8101fb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8101f9c:	68bb      	ldr	r3, [r7, #8]
 8101f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8101fa4:	683b      	ldr	r3, [r7, #0]
 8101fa6:	689b      	ldr	r3, [r3, #8]
 8101fa8:	68ba      	ldr	r2, [r7, #8]
 8101faa:	4313      	orrs	r3, r2
 8101fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	68ba      	ldr	r2, [r7, #8]
 8101fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	2201      	movs	r2, #1
 8101fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	2200      	movs	r2, #0
 8101fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8101fc6:	2300      	movs	r3, #0
}
 8101fc8:	4618      	mov	r0, r3
 8101fca:	3714      	adds	r7, #20
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd2:	4770      	bx	lr
 8101fd4:	40010000 	.word	0x40010000
 8101fd8:	40010400 	.word	0x40010400
 8101fdc:	40000400 	.word	0x40000400
 8101fe0:	40000800 	.word	0x40000800
 8101fe4:	40000c00 	.word	0x40000c00
 8101fe8:	40001800 	.word	0x40001800
 8101fec:	40014000 	.word	0x40014000

08101ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8101ff0:	b480      	push	{r7}
 8101ff2:	b085      	sub	sp, #20
 8101ff4:	af00      	add	r7, sp, #0
 8101ff6:	6078      	str	r0, [r7, #4]
 8101ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8101ffa:	2300      	movs	r3, #0
 8101ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102004:	2b01      	cmp	r3, #1
 8102006:	d101      	bne.n	810200c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8102008:	2302      	movs	r3, #2
 810200a:	e065      	b.n	81020d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	2201      	movs	r2, #1
 8102010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8102014:	68fb      	ldr	r3, [r7, #12]
 8102016:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810201a:	683b      	ldr	r3, [r7, #0]
 810201c:	68db      	ldr	r3, [r3, #12]
 810201e:	4313      	orrs	r3, r2
 8102020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8102022:	68fb      	ldr	r3, [r7, #12]
 8102024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102028:	683b      	ldr	r3, [r7, #0]
 810202a:	689b      	ldr	r3, [r3, #8]
 810202c:	4313      	orrs	r3, r2
 810202e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8102030:	68fb      	ldr	r3, [r7, #12]
 8102032:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8102036:	683b      	ldr	r3, [r7, #0]
 8102038:	685b      	ldr	r3, [r3, #4]
 810203a:	4313      	orrs	r3, r2
 810203c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810203e:	68fb      	ldr	r3, [r7, #12]
 8102040:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8102044:	683b      	ldr	r3, [r7, #0]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	4313      	orrs	r3, r2
 810204a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810204c:	68fb      	ldr	r3, [r7, #12]
 810204e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102052:	683b      	ldr	r3, [r7, #0]
 8102054:	691b      	ldr	r3, [r3, #16]
 8102056:	4313      	orrs	r3, r2
 8102058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810205a:	68fb      	ldr	r3, [r7, #12]
 810205c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8102060:	683b      	ldr	r3, [r7, #0]
 8102062:	695b      	ldr	r3, [r3, #20]
 8102064:	4313      	orrs	r3, r2
 8102066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810206e:	683b      	ldr	r3, [r7, #0]
 8102070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102072:	4313      	orrs	r3, r2
 8102074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8102076:	68fb      	ldr	r3, [r7, #12]
 8102078:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810207c:	683b      	ldr	r3, [r7, #0]
 810207e:	699b      	ldr	r3, [r3, #24]
 8102080:	041b      	lsls	r3, r3, #16
 8102082:	4313      	orrs	r3, r2
 8102084:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	4a16      	ldr	r2, [pc, #88]	; (81020e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810208c:	4293      	cmp	r3, r2
 810208e:	d004      	beq.n	810209a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	4a14      	ldr	r2, [pc, #80]	; (81020e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8102096:	4293      	cmp	r3, r2
 8102098:	d115      	bne.n	81020c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810209a:	68fb      	ldr	r3, [r7, #12]
 810209c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81020a0:	683b      	ldr	r3, [r7, #0]
 81020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81020a4:	051b      	lsls	r3, r3, #20
 81020a6:	4313      	orrs	r3, r2
 81020a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81020b0:	683b      	ldr	r3, [r7, #0]
 81020b2:	69db      	ldr	r3, [r3, #28]
 81020b4:	4313      	orrs	r3, r2
 81020b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81020b8:	68fb      	ldr	r3, [r7, #12]
 81020ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 81020be:	683b      	ldr	r3, [r7, #0]
 81020c0:	6a1b      	ldr	r3, [r3, #32]
 81020c2:	4313      	orrs	r3, r2
 81020c4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	68fa      	ldr	r2, [r7, #12]
 81020cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	2200      	movs	r2, #0
 81020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81020d6:	2300      	movs	r3, #0
}
 81020d8:	4618      	mov	r0, r3
 81020da:	3714      	adds	r7, #20
 81020dc:	46bd      	mov	sp, r7
 81020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e2:	4770      	bx	lr
 81020e4:	40010000 	.word	0x40010000
 81020e8:	40010400 	.word	0x40010400

081020ec <__libc_init_array>:
 81020ec:	b570      	push	{r4, r5, r6, lr}
 81020ee:	4d0d      	ldr	r5, [pc, #52]	; (8102124 <__libc_init_array+0x38>)
 81020f0:	4c0d      	ldr	r4, [pc, #52]	; (8102128 <__libc_init_array+0x3c>)
 81020f2:	1b64      	subs	r4, r4, r5
 81020f4:	10a4      	asrs	r4, r4, #2
 81020f6:	2600      	movs	r6, #0
 81020f8:	42a6      	cmp	r6, r4
 81020fa:	d109      	bne.n	8102110 <__libc_init_array+0x24>
 81020fc:	4d0b      	ldr	r5, [pc, #44]	; (810212c <__libc_init_array+0x40>)
 81020fe:	4c0c      	ldr	r4, [pc, #48]	; (8102130 <__libc_init_array+0x44>)
 8102100:	f000 f820 	bl	8102144 <_init>
 8102104:	1b64      	subs	r4, r4, r5
 8102106:	10a4      	asrs	r4, r4, #2
 8102108:	2600      	movs	r6, #0
 810210a:	42a6      	cmp	r6, r4
 810210c:	d105      	bne.n	810211a <__libc_init_array+0x2e>
 810210e:	bd70      	pop	{r4, r5, r6, pc}
 8102110:	f855 3b04 	ldr.w	r3, [r5], #4
 8102114:	4798      	blx	r3
 8102116:	3601      	adds	r6, #1
 8102118:	e7ee      	b.n	81020f8 <__libc_init_array+0xc>
 810211a:	f855 3b04 	ldr.w	r3, [r5], #4
 810211e:	4798      	blx	r3
 8102120:	3601      	adds	r6, #1
 8102122:	e7f2      	b.n	810210a <__libc_init_array+0x1e>
 8102124:	0810216c 	.word	0x0810216c
 8102128:	0810216c 	.word	0x0810216c
 810212c:	0810216c 	.word	0x0810216c
 8102130:	08102170 	.word	0x08102170

08102134 <memset>:
 8102134:	4402      	add	r2, r0
 8102136:	4603      	mov	r3, r0
 8102138:	4293      	cmp	r3, r2
 810213a:	d100      	bne.n	810213e <memset+0xa>
 810213c:	4770      	bx	lr
 810213e:	f803 1b01 	strb.w	r1, [r3], #1
 8102142:	e7f9      	b.n	8102138 <memset+0x4>

08102144 <_init>:
 8102144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102146:	bf00      	nop
 8102148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810214a:	bc08      	pop	{r3}
 810214c:	469e      	mov	lr, r3
 810214e:	4770      	bx	lr

08102150 <_fini>:
 8102150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102152:	bf00      	nop
 8102154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102156:	bc08      	pop	{r3}
 8102158:	469e      	mov	lr, r3
 810215a:	4770      	bx	lr
